<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荆文征</title>
  
  <subtitle>已識乾坤大，猶憐草木新。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.msiter.com/"/>
  <updated>2017-11-28T11:07:04.831Z</updated>
  <id>http://www.msiter.com/</id>
  
  <author>
    <name>小酒馆老板</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>天通苑地铁 安检方式改变</title>
    <link href="http://www.msiter.com/2017/11/23/%E7%94%9F%E6%B4%BB%E9%9A%8F%E5%A4%84%E5%8F%AF%E8%A7%81%E4%B8%80%E6%96%9120171123/"/>
    <id>http://www.msiter.com/2017/11/23/生活随处可见一斑20171123/</id>
    <published>2017-11-23T09:18:00.000Z</published>
    <updated>2017-11-28T11:07:04.831Z</updated>
    
    <content type="html"><![CDATA[<p>今天早上来到天通苑地铁站发现安检方式改变了，以前是一个口安检，在大门口存在一个可以供没带包乘客进入的通道，由于这个口离安检人员较远甚至存在一个弯道，所以根本没人会管带包乘客进入该通道。后来通道干脆封掉了，这样一来，带包不带包都需要在一个地方排队等待安检了。现在在原本通道的地方放置了两个安检门把有包无包区分开来。我只是觉得这样子挺好的，本着生活处处皆学问的心理自己觉得大概有几种心理导致了以上描述<br><a id="more"></a></p><p>最开始人们在没有人注意的时候会走通道，另外就是当一个带包的人走之后。所有的人都会出现这种情况，这种情况就类似一个很干净的地方，被一个人丢了垃圾，那里就会不断被人丢垃圾，直到变成垃圾桶。这种心理很多，从众，羊群，我觉得最好的是 破窗定律。</p><blockquote><p>破窗效应，是关于环境对人们心理造成暗示性或诱导性影响的一种认识。指如果有人打坏了一幢建筑物的窗户玻璃，而这扇窗户又得不到及时的维修，别人就可能受到某些暗示性的纵容去打烂更多的窗户。一个房子如果窗户破了，没有人去修补，隔不久，其它的窗户也会莫名其妙地被人打破；一面墙，如果出现一些涂鸦没有被清洗掉，很快的，墙上就布满了乱七八糟、不堪入目的东西；一个很干净的地方，人们不好意思丢垃圾，但是一旦地上有垃圾出现之后，人就会毫不犹豫地抛，丝毫不觉羞愧。一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有 <a href="https://link.zhihu.com/?target=http%3A//kb.kkyuyin.com/item/a6ee85e3ee4639a2dc5ba8f11b79918a.html" target="_blank" rel="noopener">破坏者</a> 破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里定居或者纵火。一面墙，如果出现一些涂鸦没有被清洗掉，很快的，墙上就布满了乱七八糟、不堪入目的东西；一条人行道有些许纸屑，不久后就会有更多垃圾，最终人们会视若理所当然地将垃圾顺手丢弃在地上。这个现象，就是犯罪心理学中的破窗效应。  </p></blockquote><p>而现在的处理方式则是利用的是，自我焦点效应，在众目睽睽之下，尤其是在安检人员和乘客不太出现那种无视规则的人，除非…</p><blockquote><p>自我焦点效应,spotlight effect ，也叫做社会焦点效应，是人们 <a href="https://link.zhihu.com/?target=http%3A//www.bing.com/knows/%25E9%25AB%2598%25E4%25BC%25B0" target="_blank" rel="noopener">高估</a> 周围人对自己外表和行为关注度的一种表现。焦点效应意味着人类往往会把自己看作一切的中心，并且直觉地高估别人对我们的注意程度。焦点效应其实是 <a href="https://link.zhihu.com/?target=http%3A//www.bing.com/knows/%25E6%25AF%258F%25E4%25B8%25AA%25E4%25BA%25BA%25E9%2583%25BD%25E4%25BC%259A" target="_blank" rel="noopener">每个人都会</a> 有的体验，这种心理状态让我们过度关注自我，过分在意聚会或者工作集会时周围人们对我们的关注程度。<br>国外有实验和结论的,大体就是除非你不穿衣服,或者在讲和做那些引人注意的事(通常跟性,死亡有关)即使你穿的像只猴子或者漂亮的像只孔雀,也么有几个人会留意你，大家都是看的自己,同时希望别人看自己.  </p></blockquote><p>生活处处皆学问，不得不说其实厉害的人无处不在。 很多人有仇视社会，自己如何努力都能做到一些事情，而觉得社会不公，觉得自己就是基于不到，以下是我辍学工作这么多年体会得到一些点可以一起分享下</p><ol><li>在互联网看到的内容来源于你想看到的内容。</li><li>上学有没有用我不知道，我只知道学历比我高的人他看问题比我快准狠，我指的是“学成”</li><li>楼下一个男人病得要死，那间壁的一家唱着留声机，对面是弄孩子。墙上有两个人狂笑，还有打牌声。河中的船上有女人哭着她死去的母亲。人类的悲欢并不相通，我只是觉得他们吵闹。 鲁迅 - 《而已集》</li><li>当你老了，回顾一生，就会发觉：什么时候出国读书，什么时候决定做第一份职业、何时选定了对象而恋爱、什么时候结婚，其实都是命运的巨变。只是当时站在三岔路口，眼见风云千樯，你作出选择的那一日，在日记上，相当沉闷和平凡，当时还以为是生命中普通的一天。 陶杰-《杀鹌鹑的少女》</li></ol><p>一下再也想不起来这么多了 以后慢慢补充吧。</p><p>热爱生活，有时候等待回报的时候不要自暴自弃，在这段时间不如多学习！🎉🎉🎉🎉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天早上来到天通苑地铁站发现安检方式改变了，以前是一个口安检，在大门口存在一个可以供没带包乘客进入的通道，由于这个口离安检人员较远甚至存在一个弯道，所以根本没人会管带包乘客进入该通道。后来通道干脆封掉了，这样一来，带包不带包都需要在一个地方排队等待安检了。现在在原本通道的地方放置了两个安检门把有包无包区分开来。我只是觉得这样子挺好的，本着生活处处皆学问的心理自己觉得大概有几种心理导致了以上描述&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.msiter.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="无趣，心理学" scheme="http://www.msiter.com/tags/%E6%97%A0%E8%B6%A3%EF%BC%8C%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用 NodeJS APNS 给你的应用发消息</title>
    <link href="http://www.msiter.com/2017/11/22/%E4%BD%BF%E7%94%A8%20NodeJS%20APNS%20%E7%BB%99%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8%E5%8F%91%E6%B6%88%E6%81%AF/"/>
    <id>http://www.msiter.com/2017/11/22/使用 NodeJS APNS 给你的应用发消息/</id>
    <published>2017-11-22T17:02:00.000Z</published>
    <updated>2017-11-28T11:07:04.831Z</updated>
    
    <content type="html"><![CDATA[<p>用到了小米的 MiPushSDK 今天出现了问题，总之无论如何就吃错误。在跟他们的开发人员进行交流的同时，我想看看是谁的问题，所以有了以下的经历。</p><p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-236362221.jpg" alt="楼下一个男人病的要死，隔壁的一家唱着留音机。对面是哄孩子，楼上有两个人狂笑，还有打牌声。河边的船上有女人哭着她死去的母亲。人类的悲喜并不相通，我只觉得他们吵闹。——鲁迅"></p><a id="more"></a><h2 id="创建推送证书"><a href="#创建推送证书" class="headerlink" title="创建推送证书"></a>创建推送证书</h2><p>创建推送证书 这个步骤省略</p><h2 id="导出-证书-p12-和-key-p12"><a href="#导出-证书-p12-和-key-p12" class="headerlink" title="导出 证书.p12 和 key.p12"></a>导出 证书.p12 和 key.p12</h2><p>推送证书安装在本地之后</p><ol><li>打开 应用 钥匙串访问 找到自己的证书</li><li>在需要导出的证书上右键点击 导出 这个东西就是证书.p12 有没有密码都可以 密码会用来一会 openssl 的时候输入</li><li>点击这个证书 展开之后会看到一个 Key 右键导出 这个导出的 p12 就是 key.p12 密码设置同上</li></ol><h2 id="将导出的-p12-生成为-pem"><a href="#将导出的-p12-生成为-pem" class="headerlink" title="将导出的 p12 生成为 pem"></a>将导出的 p12 生成为 pem</h2><pre class="line-numbers language-shell"><code class="language-shell">openssl pkcs12 -clcerts -nokeys -out cert.pem -in cert.p12 # 导出 cert.pemopenssl pkcs12 -in key.p12 -out key.pem -nodes # 导出 key.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在转换过程中 p12 设置了密码就输入密码 没有输入直接回车就可以<br>在设置 key.pem 的过程中 会向你询问是否设置密码，设置密码需要输入两次 分别是密码和确认密码</p><h2 id="开始创建-Nodejs-APNS-服务"><a href="#开始创建-Nodejs-APNS-服务" class="headerlink" title="开始创建 Nodejs APNS 服务"></a>开始创建 Nodejs APNS 服务</h2><h3 id="创建-NodeJs项目"><a href="#创建-NodeJs项目" class="headerlink" title="创建 NodeJs项目"></a>创建 NodeJs项目</h3><p>创建一个 NodeJS 项目</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir APNScd APNSnpm init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按照步骤填写信息，之后在生成的package.json 文件中 引入 对于 apn  的支持</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"apn"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>总体上看起来是这个样子的</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"apn"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"apn"</span><span class="token operator">:</span> <span class="token string">""</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>创建一个 index.js 文件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> apn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"apn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"&lt;&lt;you want push device token>>"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">apn<span class="token punctuation">.</span>Provider</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"cert"</span><span class="token punctuation">:</span> <span class="token string">"push/cert.pem"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 根目录下创建 push 文件夹 将文件放置在内，当然你可以放在自己喜欢的位置</span>  <span class="token string">"key"</span><span class="token punctuation">:</span> <span class="token string">"push/key.pem"</span><span class="token punctuation">,</span>  <span class="token string">"production"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> note <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">apn<span class="token punctuation">.</span>Notification</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"alert"</span><span class="token punctuation">:</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span>  <span class="token string">"sound"</span><span class="token punctuation">:</span><span class="token string">"default"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The topic is usually the bundle identifier of your application.</span>note<span class="token punctuation">.</span>topic <span class="token operator">=</span> <span class="token string">"&lt;&lt;you bundle identifier>>"</span><span class="token punctuation">;</span>note<span class="token punctuation">.</span>badge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Sending: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>note<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tokens<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>note<span class="token punctuation">,</span> tokens<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sent:"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>sent<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"failed:"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>failed<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>failed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// For one-shot notification tasks you may wish to shutdown the connection</span><span class="token comment" spellcheck="true">// after everything is sent, but only call shutdown if you need your</span><span class="token comment" spellcheck="true">// application to terminate.</span>service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这里面只进行了一些基本的设置，只设置了标题关于消息内容等设置 可以查阅文档或者直接在</p><p>apn/lib/notification/ 目录下查看 设置</p><p>目前的版本是存在这些的</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token string">"payload"</span><span class="token punctuation">,</span> <span class="token string">"expiry"</span><span class="token punctuation">,</span> <span class="token string">"priority"</span><span class="token punctuation">,</span> <span class="token string">"alert"</span><span class="token punctuation">,</span> <span class="token string">"body"</span><span class="token punctuation">,</span> <span class="token string">"locKey"</span><span class="token punctuation">,</span><span class="token string">"locArgs"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"subtitle"</span><span class="token punctuation">,</span> <span class="token string">"titleLocKey"</span><span class="token punctuation">,</span> <span class="token string">"titleLocArgs"</span><span class="token punctuation">,</span> <span class="token string">"action"</span><span class="token punctuation">,</span><span class="token string">"actionLocKey"</span><span class="token punctuation">,</span> <span class="token string">"launchImage"</span><span class="token punctuation">,</span> <span class="token string">"badge"</span><span class="token punctuation">,</span> <span class="token string">"sound"</span><span class="token punctuation">,</span> <span class="token string">"contentAvailable"</span><span class="token punctuation">,</span><span class="token string">"mutableContent"</span><span class="token punctuation">,</span> <span class="token string">"mdm"</span><span class="token punctuation">,</span> <span class="token string">"urlArgs"</span><span class="token punctuation">,</span> <span class="token string">"category"</span><span class="token punctuation">,</span> <span class="token string">"threadId"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-shell"><code class="language-shell">node index.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大功告成</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用到了小米的 MiPushSDK 今天出现了问题，总之无论如何就吃错误。在跟他们的开发人员进行交流的同时，我想看看是谁的问题，所以有了以下的经历。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-236362221.jpg&quot; alt=&quot;楼下一个男人病的要死，隔壁的一家唱着留音机。对面是哄孩子，楼上有两个人狂笑，还有打牌声。河边的船上有女人哭着她死去的母亲。人类的悲喜并不相通，我只觉得他们吵闹。——鲁迅&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://www.msiter.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="ios" scheme="http://www.msiter.com/tags/ios/"/>
    
      <category term="NodeJS" scheme="http://www.msiter.com/tags/NodeJS/"/>
    
      <category term="APNs" scheme="http://www.msiter.com/tags/APNs/"/>
    
  </entry>
  
  <entry>
    <title>IOS10前 UITextFiled 的 placeholder 的问题</title>
    <link href="http://www.msiter.com/2017/11/16/IOS10%E5%89%8D%20UITextFiled%20%E7%9A%84%20placeholder%20%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.msiter.com/2017/11/16/IOS10前 UITextFiled 的 placeholder 的问题/</id>
    <published>2017-11-16T01:16:00.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The styled string that is displayed when there is no other text in the text field.<br>This property is nil by default. If set, the placeholder string is drawn using system-defined color and the remaining style information (except the text color) of the attributed string. Assigning a new value to this property also replaces the value of the placeholder property with the same string data, albeit without any formatting information. Assigning a new value to this property does not affect any other style-related properties of the text field</p></blockquote><p>这是官方的一片解释，看着都很不错的～</p><a id="more"></a><p>然而</p><p>今天我们的巨头设计师来找我，说我的输入框不居中.我不以为然，怎么可能～因为我的设备上是好的<br>拿来手机一看，还真是，，，好吧 赶紧找原因吧，因为我的设备是IOS11 所以我怀疑是不是IOS10的问题。<br>之后找了一些资料发现</p><blockquote><p><a href="https://stackoverflow.com/questions/28677519/vertically-centering-a-uitextfields-attributedplaceholder" target="_blank" rel="noopener">Vertically centering a UITextField’s attributedPlaceholder</a><br><a href="https://www.google.com.hk/search?safe=strict&amp;ei=WB8NWvSGG8LNmQHB0q2oBw&amp;q=uitextfield+attributedplaceholder+center&amp;oq=uitextfield+attributedplaceholder+c&amp;gs_l=psy-ab.3.0.0i203k1.98408.107770.0.109474.25.19.0.0.0.0.469.2569.2-6j1j1.8.0....0...1.1j4.64.psy-ab..18.7.2272...0j0i10i203k1j0i10k1j0i10i30k1j35i39k1j0i67k1j0i30k1j0i8i30k1.0.n33G4smHqp4" target="_blank" rel="noopener">uitextfield attributedplaceholder center Google</a></p></blockquote><p>发觉这个问题还是普遍存在的 有不少人给处理自己的做法比如：</p><p><a href="https://stackoverflow.com/users/1486308/kean" target="_blank" rel="noopener">kean</a>在 Stackflow中的回答</p><pre class="line-numbers language-objectivec"><code class="language-objectivec">NSMutableParagraphStyle <span class="token operator">*</span>style <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>addressBar<span class="token punctuation">.</span>defaultTextAttributes<span class="token punctuation">[</span>NSParagraphStyleAttributeName<span class="token punctuation">]</span> mutableCopy<span class="token punctuation">]</span><span class="token punctuation">;</span>style<span class="token punctuation">.</span>minimumLineHeight <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>addressBar<span class="token punctuation">.</span>font<span class="token punctuation">.</span>lineHeight <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>addressBar<span class="token punctuation">.</span>font<span class="token punctuation">.</span>lineHeight <span class="token operator">-</span> <span class="token punctuation">[</span>UIFont fontWithName<span class="token punctuation">:</span><span class="token string">@"Gotham-BookItalic"</span> size<span class="token punctuation">:</span><span class="token number">14.0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lineHeight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token keyword">self</span><span class="token punctuation">.</span>addressBar<span class="token punctuation">.</span>attributedPlaceholder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSAttributedString alloc<span class="token punctuation">]</span> initWithString<span class="token punctuation">:</span><span class="token string">@"Placeholder text"</span>                            attributes<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">{</span>                                         NSForegroundColorAttributeName<span class="token punctuation">:</span> <span class="token punctuation">[</span>UIColor colorWithRed<span class="token punctuation">:</span><span class="token number">79</span><span class="token operator">/</span><span class="token number">255.0f</span> green<span class="token punctuation">:</span><span class="token number">79</span><span class="token operator">/</span><span class="token number">255.0f</span> blue<span class="token punctuation">:</span><span class="token number">79</span><span class="token operator">/</span><span class="token number">255.0f</span> alpha<span class="token punctuation">:</span><span class="token number">0.5f</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                         NSFontAttributeName <span class="token punctuation">:</span> <span class="token punctuation">[</span>UIFont fontWithName<span class="token punctuation">:</span><span class="token string">@"Gotham-BookItalic"</span> size<span class="token punctuation">:</span><span class="token number">14.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                         NSParagraphStyleAttributeName <span class="token punctuation">:</span> style                                         <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外他也给出了另一种方法</p><blockquote><p>You could also override a <code>- (CGRect)placeholderRectForBounds:(CGRect)bounds;</code> method in UITextField subclass.</p><p>It’s messy, but it works :)</p></blockquote><p>还有很多搜到的方法 我就不一一赘述了。他们的方法或多或少的都没很麻烦，而且需要进行适配，比如这种调整位置的是可以的。但是IOS11 位置又好了怎么办呢？<br>最终找到如下的方法，特此记录一下</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>placeholderRectForBounds<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>bounds <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawPlaceholderInRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>rect <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token keyword">super</span> drawPlaceholderInRect<span class="token punctuation">:</span><span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;The styled string that is displayed when there is no other text in the text field.&lt;br&gt;This property is nil by default. If set, the placeholder string is drawn using system-defined color and the remaining style information (except the text color) of the attributed string. Assigning a new value to this property also replaces the value of the placeholder property with the same string data, albeit without any formatting information. Assigning a new value to this property does not affect any other style-related properties of the text field&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是官方的一片解释，看着都很不错的～&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="IOS" scheme="http://www.msiter.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>WebView 与 Html Input File 以及 Upload File 出现的问题</title>
    <link href="http://www.msiter.com/2017/10/26/WebView%20%E4%B8%8E%20Html%20Input%20Bug/"/>
    <id>http://www.msiter.com/2017/10/26/WebView 与 Html Input Bug/</id>
    <published>2017-10-26T04:10:00.000Z</published>
    <updated>2017-11-28T11:07:04.831Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中使用了WebView来显示一些内容，之后就遇到了一些问题。总结了一下</p><p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-233150091.jpg" alt="一杯敬自由，一杯敬死亡" title="你还很年轻,将来你会遇到很多人,经历很多事,得到很多,也会失去很多&lt;br/&gt;&lt;br/&gt;但无论如何,有两样东西,你绝不能丢弃,一个叫良心,另一个叫理想"></p><a id="more"></a><h2 id="遇到-Input-File-出现的-崩溃问题"><a href="#遇到-Input-File-出现的-崩溃问题" class="headerlink" title="遇到 Input File 出现的 崩溃问题"></a>遇到 Input File 出现的 崩溃问题</h2><p>这个问题其实还是比较好解决 无非就是权限问题 具体的key值</p><p>请直接访问 <a href="https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html" target="_blank" rel="noopener">Cocoa Keys</a></p><h2 id="Model-的ViewController-在上传文件后-会直接-dismiss掉"><a href="#Model-的ViewController-在上传文件后-会直接-dismiss掉" class="headerlink" title="Model 的ViewController 在上传文件后 会直接 dismiss掉"></a>Model 的ViewController 在上传文件后 会直接 dismiss掉</h2><p>解决办法 在 Model 出来的 ViewController 加入 UINavigationController</p><p>之后重写 UINavigationController 的方法</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>dismissViewControllerAnimated<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>flag completion<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>completion<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>presentedViewController<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token keyword">super</span> dismissViewControllerAnimated<span class="token punctuation">:</span>flag completion<span class="token punctuation">:</span>completion<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自己重写pan-dismiss-方法的障碍解决"><a href="#自己重写pan-dismiss-方法的障碍解决" class="headerlink" title="自己重写pan dismiss 方法的障碍解决"></a>自己重写pan dismiss 方法的障碍解决</h3><p>在我们想重写dismiss的方法时，会绑定一个手势。但是在 WebView中已经存在了很多手势了。<br>其中就包括 两个 <code>UIScreenEdgePanGestureRecognizer</code>，一个进行前进操作 一个进行后退操作</p><p>我们想重写pan方法进行前进后退dismiss的话，暂时只有两种办法，接下来我们看看那种方法可以使用吧</p><h4 id="第一种-自己去写-WebView-中的-pan-手势"><a href="#第一种-自己去写-WebView-中的-pan-手势" class="headerlink" title="第一种 自己去写 WebView 中的 pan 手势"></a>第一种 自己去写 WebView 中的 pan 手势</h4><p>首先想到的就是这个方法，因为这个方法很省事儿，可定义程度高，当然这是可行的情况下</p><p>事实证明，我们在第一个问题就被拌住了，我们没有办法去渐进式的 前进网页 和 后退 所以这个问题不得不放弃</p><h4 id="第二种-使用-UIGestureRecognizerDelegate-来暂时关闭-webview中的手势"><a href="#第二种-使用-UIGestureRecognizerDelegate-来暂时关闭-webview中的手势" class="headerlink" title="第二种 使用 UIGestureRecognizerDelegate 来暂时关闭 webview中的手势"></a>第二种 使用 UIGestureRecognizerDelegate 来暂时关闭 webview中的手势</h4><p>这个方法最终实践是可以的</p><p>首先我们获取到 后退的手势 在创建 WebView 之后，我们这样获取</p><h5 id="获取到-手势-并且设置-delegate"><a href="#获取到-手势-并且设置-delegate" class="headerlink" title="获取到 手势 并且设置 delegate"></a>获取到 手势 并且设置 delegate</h5><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token keyword">for</span> <span class="token punctuation">(</span>UIGestureRecognizer <span class="token operator">*</span>reconizer <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token punctuation">.</span>wkWebView<span class="token punctuation">.</span>gestureRecognizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// 如果获取的 手势 类型是 ScreenEdgePanGestureRecognizer 类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>reconizer isKindOfClass<span class="token punctuation">:</span>UIScreenEdgePanGestureRecognizer<span class="token punctuation">.</span>class<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/// 如果手势对象是 返回的收视对象 作出以下处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UIScreenEdgePanGestureRecognizer<span class="token operator">*</span><span class="token punctuation">)</span>reconizer<span class="token punctuation">)</span><span class="token punctuation">.</span>edges <span class="token operator">==</span> UIRectEdgeLeft<span class="token punctuation">)</span> <span class="token punctuation">{</span>                reconizer<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/// 该手势就是 前进手势</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UIScreenEdgePanGestureRecognizer<span class="token operator">*</span><span class="token punctuation">)</span>reconizer<span class="token punctuation">)</span><span class="token punctuation">.</span>edges <span class="token operator">==</span> UIRectEdgeRight<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="根据WebView-是否可以返回-控制手势是否可用"><a href="#根据WebView-是否可以返回-控制手势是否可用" class="headerlink" title="根据WebView 是否可以返回 控制手势是否可用"></a>根据WebView 是否可以返回 控制手势是否可用</h5><p>获取到 delegate之后我们就可以进行操作了 接下来实现 delegate 的方法</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">/// 当WebView 不可以返回到时候，我们不让该手势触发</span><span class="token operator">-</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>gestureRecognizerShouldBegin<span class="token punctuation">:</span><span class="token punctuation">(</span>UIGestureRecognizer <span class="token operator">*</span><span class="token punctuation">)</span>gestureRecognizer<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>wkWebView<span class="token punctuation">.</span>canGoBack<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="写-推出视图的方法"><a href="#写-推出视图的方法" class="headerlink" title="写 推出视图的方法"></a>写 推出视图的方法</h5><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span><span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>initWithRootViewController<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>rootViewController<span class="token punctuation">{</span>    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> initWithRootViewController<span class="token punctuation">:</span>rootViewController<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _presentdAnimation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>BaseViewControllerPresentdAnimation alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>        _dismissedAnimation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>BaseViewControllerDismissedAnimation alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>        _interactiveTransitioning <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>BasePresentdAnimationInteractiveTransition alloc<span class="token punctuation">]</span>init<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>navigationBarHidden <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>transitioningDelegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>modalPresentationCapturesStatusBarAppearance <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 在获取到 RootViewController 完成 手势的绑定 这样在 Wkwebview 手势不可用的时候 该手势就可以使用了</span>        _panGestureRecognizer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIScreenEdgePanGestureRecognizer alloc<span class="token punctuation">]</span> initWithTarget<span class="token punctuation">:</span><span class="token keyword">self</span> action<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>handlePanGestureRecognizerMethod<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        _panGestureRecognizer<span class="token punctuation">.</span>edges <span class="token operator">=</span> UIRectEdgeLeft<span class="token punctuation">;</span>        <span class="token punctuation">[</span>rootViewController<span class="token punctuation">.</span>view addGestureRecognizer<span class="token punctuation">:</span>_panGestureRecognizer<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">(</span>id<span class="token operator">&lt;</span>UIViewControllerAnimatedTransitioning<span class="token operator">></span><span class="token punctuation">)</span>animationControllerForPresentedController<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>presented presentingController<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>presenting sourceController<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>source<span class="token punctuation">{</span>    <span class="token keyword">return</span> _presentdAnimation <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">(</span>id<span class="token operator">&lt;</span>UIViewControllerAnimatedTransitioning<span class="token operator">></span><span class="token punctuation">)</span>animationControllerForDismissedController<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>dismissed<span class="token punctuation">{</span>    <span class="token keyword">return</span> _dismissedAnimation<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">(</span>id<span class="token operator">&lt;</span>UIViewControllerInteractiveTransitioning<span class="token operator">></span><span class="token punctuation">)</span>interactionControllerForDismissal<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token operator">&lt;</span>UIViewControllerAnimatedTransitioning<span class="token operator">></span><span class="token punctuation">)</span>animator<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_dismissedAnimation<span class="token punctuation">.</span>isInteraction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> _interactiveTransitioning<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nil<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>handlePanGestureRecognizerMethod<span class="token punctuation">:</span><span class="token punctuation">(</span>UIPanGestureRecognizer <span class="token operator">*</span><span class="token punctuation">)</span>pan<span class="token punctuation">{</span>    CGPoint point <span class="token operator">=</span> <span class="token punctuation">[</span>pan translationInView<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>pan<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> UIGestureRecognizerStateBegan<span class="token punctuation">:</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>dismissedAnimation<span class="token punctuation">.</span>isInteraction <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">.</span>firstObject dismissViewControllerAnimated<span class="token punctuation">:</span>true completion<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> UIGestureRecognizerStateChanged<span class="token punctuation">:</span>            <span class="token punctuation">[</span>_interactiveTransitioning updateInteractiveTransition<span class="token punctuation">:</span> <span class="token punctuation">(</span>CGFloat<span class="token punctuation">)</span>point<span class="token punctuation">.</span>x<span class="token operator">/</span><span class="token function">CGRectGetWidth</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>frame<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            _dismissedAnimation<span class="token punctuation">.</span>isInteraction <span class="token operator">=</span> false<span class="token punctuation">;</span>            CGFloat locationX <span class="token operator">=</span> <span class="token function">ABS</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            CGFloat velocityX <span class="token operator">=</span> <span class="token punctuation">[</span>pan velocityInView<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>velocityX <span class="token operator">>=</span> <span class="token number">500</span> <span class="token operator">||</span> locationX <span class="token operator">>=</span> <span class="token function">CGRectGetWidth</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>frame<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">[</span>_interactiveTransitioning finishInteractiveTransition<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token punctuation">[</span>_interactiveTransitioning cancelInteractiveTransition<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="http://image.msiter.com/wkwebview-screen-pan-cancel.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中使用了WebView来显示一些内容，之后就遇到了一些问题。总结了一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-233150091.jpg&quot; alt=&quot;一杯敬自由，一杯敬死亡&quot; title=&quot;你还很年轻,将来你会遇到很多人,经历很多事,得到很多,也会失去很多&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;但无论如何,有两样东西,你绝不能丢弃,一个叫良心,另一个叫理想&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="WKWebView" scheme="http://www.msiter.com/tags/WKWebView/"/>
    
      <category term="WebView" scheme="http://www.msiter.com/tags/WebView/"/>
    
      <category term="UIWebView" scheme="http://www.msiter.com/tags/UIWebView/"/>
    
      <category term="Input" scheme="http://www.msiter.com/tags/Input/"/>
    
      <category term="File" scheme="http://www.msiter.com/tags/File/"/>
    
      <category term="Bug" scheme="http://www.msiter.com/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>IOS shadowColor 动画 卡顿</title>
    <link href="http://www.msiter.com/2017/10/12/IOS%20shadowColor%20%E5%8A%A8%E7%94%BB%20%E5%8D%A1%E9%A1%BF/"/>
    <id>http://www.msiter.com/2017/10/12/IOS shadowColor 动画 卡顿/</id>
    <published>2017-10-12T18:00:00.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发的时候遇见了一件怪事儿，做了一个 <code>UIViewControllerContextTransitioning</code>,在同事的手机上跳转会卡顿。在此之前写的跳转动画都没有卡顿的现象。<br>最终终于发现了问题的所在在于 shadowColor ，在跳转的时候我设置了一个阴影增加层级层次效果。<br><a id="more"></a></p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token keyword">@implementation</span> BaseViewControllerPresentdAnimation<span class="token operator">-</span><span class="token punctuation">(</span>NSTimeInterval<span class="token punctuation">)</span>transitionDuration<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token operator">&lt;</span>UIViewControllerContextTransitioning<span class="token operator">></span><span class="token punctuation">)</span>transitionContext <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0.5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>animateTransition<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token operator">&lt;</span>UIViewControllerContextTransitioning<span class="token operator">></span><span class="token punctuation">)</span>transitionContext<span class="token punctuation">{</span>    UIViewController <span class="token operator">*</span>toViewController <span class="token operator">=</span> <span class="token punctuation">[</span>transitionContext viewControllerForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>UITransitionContextToViewControllerKey<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    UIView <span class="token operator">*</span>containerView <span class="token operator">=</span> <span class="token punctuation">[</span>transitionContext containerView<span class="token punctuation">]</span><span class="token punctuation">;</span>    UIView <span class="token operator">*</span>coverView <span class="token operator">=</span> <span class="token punctuation">[</span>UIView<span class="token punctuation">.</span>alloc initWithFrame<span class="token punctuation">:</span>containerView<span class="token punctuation">.</span>bounds<span class="token punctuation">]</span><span class="token punctuation">;</span>    coverView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor<span class="token punctuation">.</span>blackColor colorWithAlphaComponent<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>containerView addSubview<span class="token punctuation">:</span>coverView<span class="token punctuation">]</span><span class="token punctuation">;</span>    toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token function">CGAffineTransformTranslate</span><span class="token punctuation">(</span>toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>transform<span class="token punctuation">,</span> <span class="token function">CGRectGetWidth</span><span class="token punctuation">(</span>toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>frame<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>containerView addSubview<span class="token punctuation">:</span>toViewController<span class="token punctuation">.</span>view<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token keyword">self</span> makeShadowMethod<span class="token punctuation">:</span>toViewController<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>UIView animateWithDuration<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">self</span> transitionDuration<span class="token punctuation">:</span>transitionContext<span class="token punctuation">]</span> animations<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>        toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>transform <span class="token operator">=</span> CGAffineTransformIdentity<span class="token punctuation">;</span>        coverView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor<span class="token punctuation">.</span>blackColor colorWithAlphaComponent<span class="token punctuation">:</span><span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> completion<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>BOOL finished<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>coverView removeFromSuperview<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span>transitionContext completeTransition<span class="token punctuation">:</span>true<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>makeShadowMethod<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>toViewController<span class="token punctuation">{</span>    toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>clipsToBounds <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 需要添加这句话，可以使动画不再卡顿</span>    toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowPath <span class="token operator">=</span> <span class="token punctuation">[</span>UIBezierPath bezierPathWithRect<span class="token punctuation">:</span>toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>bounds<span class="token punctuation">]</span><span class="token punctuation">.</span>CGPath<span class="token punctuation">;</span>    toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowRadius <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor<span class="token punctuation">.</span>blackColor colorWithAlphaComponent<span class="token punctuation">:</span><span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>CGColor<span class="token punctuation">;</span>    toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowOffset <span class="token operator">=</span> <span class="token function">CGSizeMake</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.0f</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    toViewController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowOpacity <span class="token operator">=</span> <span class="token number">0.4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">@end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>知道这个解决方案是看到了 <a href="http://blog.csdn.net/Lu_Ca/article/details/47422913" target="_blank" rel="noopener">Lu_Ca的博客</a></p><p>之后就很好奇为什么这个代码会有这么神奇的作用呢？ <a href="http://blog.csdn.net/meegomeego/article/details/22728465" target="_blank" rel="noopener">SpeedBoy007的专栏</a></p><blockquote><p> 只要你提前告诉CoreAnimation你要渲染的View的形状Shape,就会减少离屏渲染计算</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token punctuation">[</span>myView<span class="token punctuation">.</span>layer setShadowPath：<span class="token punctuation">[</span><span class="token punctuation">[</span>UIBezierPath   bezierPathWithRect：myView<span class="token punctuation">.</span>bounds<span class="token punctuation">]</span> CGPath<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>加上这行代码，就减少离屏渲染时间，大大提高了性能</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开发的时候遇见了一件怪事儿，做了一个 &lt;code&gt;UIViewControllerContextTransitioning&lt;/code&gt;,在同事的手机上跳转会卡顿。在此之前写的跳转动画都没有卡顿的现象。&lt;br&gt;最终终于发现了问题的所在在于 shadowColor ，在跳转的时候我设置了一个阴影增加层级层次效果。&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="Objective-C" scheme="http://www.msiter.com/tags/Objective-C/"/>
    
      <category term="ios" scheme="http://www.msiter.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>一杯敬自由，一杯敬死亡</title>
    <link href="http://www.msiter.com/2017/09/04/2017-9-4%20%E6%9C%89%E6%84%9F/"/>
    <id>http://www.msiter.com/2017/09/04/2017-9-4 有感/</id>
    <published>2017-09-04T03:25:00.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-226662239.jpg" alt="一杯敬自由，一杯敬死亡" title="一杯敬自由，一杯敬死亡 &lt;br/&gt;&lt;br/&gt;宽恕我的平凡，驱散了迷惘&lt;br/&gt;&lt;br/&gt;好吧天亮之后总是潦草离场&lt;br/&gt;&lt;br/&gt;清醒的人最荒唐&lt;br/&gt;&lt;br/&gt;好吧天亮之后总是潦草离场&lt;br/&gt;&lt;br/&gt;"></p><a id="more"></a><p>转眼二十多年过去了，今年22岁，身高178，体重145斤。这两年，体重没有变高，但是体重和年龄确实变大了不少，身体变弱了很多，出去玩的时候，稍微运动下，第二天身体就会给出非常明显的反应，酸痛感十足</p><p>可怕的不是变大了，身体变差了，而是默默的接受了这各种设定，给自己一个改变不了的理由了。</p><p>这些年，在北京，从最开始的创业公司遍天下，到现在的寥寥数几个。看惯了，失败，看惯了，别人的成功。看惯了以前看不惯的</p><p>变老的不只是身体，更多的是那份心。</p><p>以前不知道的知道，但是少了的是，时间，拼，劲儿，其实归根结底还是对于目前的不敢放弃，从头来，也许会更好，但是不敢再去试验了。</p><center style="font-size:14px;color:gray;"><br>当你走进这欢乐场<br>背上所有的梦与想<br>各色的脸上各色的妆<br>没人记得你的模样<br>三巡酒过你在角落<br>固执的唱着苦涩的歌<br>听他在喧嚣里被淹没<br>你拿起酒杯对自己说<br>一杯敬朝阳，一杯敬月光<br>唤醒我的向往，温柔了寒窗<br>于是可以不回头的逆风飞翔<br>不怕心头有雨，眼底有霜<br>一杯敬故乡，一杯敬远方<br>守着我的善良，催着我成长<br>所以南北的路从此不再漫长<br>灵魂不再无处安放<br>一杯敬明天，一杯敬过往<br>支撑我的身体，厚重了肩膀<br>虽然从不相信所谓山高水长<br>人生苦短何必念念不忘<br>一杯敬自由，一杯敬死亡<br>宽恕我的平凡，驱散了迷惘<br>好吧天亮之后总是潦草离场<br>清醒的人最荒唐<br>好吧天亮之后总是潦草离场<br>清醒的人最荒唐<br><br></center><p>是对还是错，其实你知道的，只是不敢</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-226662239.jpg&quot; alt=&quot;一杯敬自由，一杯敬死亡&quot; title=&quot;一杯敬自由，一杯敬死亡 &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;宽恕我的平凡，驱散了迷惘&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;好吧天亮之后总是潦草离场&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;清醒的人最荒唐&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;好吧天亮之后总是潦草离场&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="牢骚" scheme="http://www.msiter.com/categories/%E7%89%A2%E9%AA%9A/"/>
    
    
      <category term="生活" scheme="http://www.msiter.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="悲观" scheme="http://www.msiter.com/tags/%E6%82%B2%E8%A7%82/"/>
    
  </entry>
  
  <entry>
    <title>AsyncDisplayKit 2.1 Gif错误，以及解决方法</title>
    <link href="http://www.msiter.com/2017/08/22/AsyncDisplayKit%202.1%20Gif%E9%94%99%E8%AF%AF/"/>
    <id>http://www.msiter.com/2017/08/22/AsyncDisplayKit 2.1 Gif错误/</id>
    <published>2017-08-22T14:45:00.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 AsyncDisplayKit 遇到了一些问题，因为工作需要必须支持IOS7，所以选择了 AsyncDisplayKit 2.1版本。但是在使用 其中的 展示gif的时候出现了一些问题。<br><a id="more"></a></p><p>目前的 修改库 版本为</p><p><img class = "g-pl-90"  src="https://img.shields.io/cocoapods/v/AsyncDisplayKitFix.svg" alt="version"></p><p>在使用的时候出现了 GIF 有的时候出现，有的是不出现，有的时候出现了，却不动的情况。</p><p>最终找到解决方案在。  <a href="https://github.com/facebookarchive/AsyncDisplayKit/pull/3057" target="_blank" rel="noopener">AsyncDisplayKit Pull Request 3057</a></p><p>代码在于 <a href="https://github.com/facebookarchive/AsyncDisplayKit/commit/d270577f23dca63c69bc6cd0e4cea6652733a376" target="_blank" rel="noopener">AsyncDisplayKit commit d270577f23dca63c69bc6cd0e4cea6652733a376</a></p><p>但是现在 AsyncDisokayKit 已经开始支持 IOS8版本以上了。并且已经移动到了 <a href="https://github.com/texturegroup/texture/" target="_blank" rel="noopener">Texture</a></p><p>所以我们只能手动自己创建了一个版本了。</p><ol><li>解决方案 自己本地 local 库 修改 2.1 版本的代码</li><li>使用我已经修改好的代码库 引入 <code>pod AsyncDisplayKitFix</code></li></ol><p>—————————————— 2017年9月4号</p><p>再次修复了，两个问题，当然只是我的项目中的。记录一下</p><p>第一个. 关于 ASTableNode 刷新某一个section或者某一个行的时候，会启动一个验证方法，但是这个方法是验证所有的section，我分别控制第一个或者第二个secrion就会出现刷新前和刷新后的数量对不上，而导致报错。</p><p>在文件 <code>_ASHierarchyChangeSet.mm</code>  <code>_validateUpdate</code> 修改验证</p><p>第二个. 在ASTextNode赋值的时候，我记得没错误的话。官方的例子是 可以判断 ASTextNode的attritedString 是否为空，来做一些布局的变化。但是在实际使用中，发现了它的方法，写的确实</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setAttributedText<span class="token punctuation">:</span><span class="token punctuation">(</span>NSAttributedString <span class="token operator">*</span><span class="token punctuation">)</span>attributedText<span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>attributedText <span class="token operator">==</span> nil<span class="token punctuation">)</span> <span class="token punctuation">{</span>      attributedText <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSAttributedString alloc<span class="token punctuation">]</span> initWithString<span class="token punctuation">:</span><span class="token string">@""</span> attributes<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Don't hold textLock for too long.</span>  <span class="token punctuation">{</span>    ASDN<span class="token punctuation">:</span><span class="token punctuation">:</span>MutexLocker <span class="token function">l</span><span class="token punctuation">(</span>__instanceLock__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ASObjectIsEqual</span><span class="token punctuation">(</span>attributedText<span class="token punctuation">,</span> _attributedText<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种问题就是会一直都不能为nil。故而修复为</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setAttributedText<span class="token punctuation">:</span><span class="token punctuation">(</span>NSAttributedString <span class="token operator">*</span><span class="token punctuation">)</span>attributedText<span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>attributedText <span class="token operator">==</span> nil<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Don't hold textLock for too long.</span>  <span class="token punctuation">{</span>    ASDN<span class="token punctuation">:</span><span class="token punctuation">:</span>MutexLocker <span class="token function">l</span><span class="token punctuation">(</span>__instanceLock__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ASObjectIsEqual</span><span class="token punctuation">(</span>attributedText<span class="token punctuation">,</span> _attributedText<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 AsyncDisplayKit 遇到了一些问题，因为工作需要必须支持IOS7，所以选择了 AsyncDisplayKit 2.1版本。但是在使用 其中的 展示gif的时候出现了一些问题。&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="Objective-C" scheme="http://www.msiter.com/tags/Objective-C/"/>
    
      <category term="AsyncDisplayKit" scheme="http://www.msiter.com/tags/AsyncDisplayKit/"/>
    
      <category term="ios" scheme="http://www.msiter.com/tags/ios/"/>
    
      <category term="约束教程" scheme="http://www.msiter.com/tags/%E7%BA%A6%E6%9D%9F%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot Mybatis 学习</title>
    <link href="http://www.msiter.com/2017/07/21/Spring%20boot%20Mybatis%20%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.msiter.com/2017/07/21/Spring boot Mybatis 学习/</id>
    <published>2017-07-21T18:25:00.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-220506113.jpg" alt="" title="我年华虚度，空有一身疲倦"></p><h2 id="开始前的闲聊"><a href="#开始前的闲聊" class="headerlink" title="开始前的闲聊"></a>开始前的闲聊</h2><p>一直都想回家，北京呆不起。想回家，却发现，家里的开发职位都是java的，，，那没办法，捡起来吧</p><a id="more"></a><h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><p>在创建项目的时候，我们使用了最基本的配置，所以项目没有目录等。我们需要使用maven默认的文件配置</p><pre><code>src  main -- 开发包    java -- 代码包    resources -- 资源包  test -- 测试包    java -- 代码包    resources -- 资源包</code></pre><h2 id="gradle-配置"><a href="#gradle-配置" class="headerlink" title="gradle 配置"></a>gradle 配置</h2><p>在idea 创建一个 gradle 项目。但是本来在本地安装了一个 4.0 版本的 gradle，我在idea设置了一个 local gradle，但是却出现了一个问题。 启动服务器的时候，出现了莫名的问题<br>最后在statckflow中发现了解决办法就是使用默认的gradle。</p><p>之后配置 gradle 安装信息</p><pre><code>group &#39;Farrom&#39;version &#39;1.0-SNAPSHOT&#39;apply plugin: &#39;java&#39;apply plugin: &#39;war&#39;apply plugin: &#39;idea&#39;sourceCompatibility = 1.8repositories {    jcenter()    maven { url &quot;http://repo.spring.io/snapshot&quot; }    maven { url &quot;http://repo.spring.io/milestone&quot; }}dependencies {    // 阿里巴巴 durid 数据源    compile group: &#39;com.alibaba&#39;, name: &#39;druid&#39;, version: &#39;1.1.1&#39;    // 数据 链接    compile group: &#39;mysql&#39;, name: &#39;mysql-connector-java&#39;, version: &#39;6.0.6&#39;    // Spring Boot    compile group: &#39;org.springframework.boot&#39;, name: &#39;spring-boot-starter-web&#39;, version: &#39;1.5.4.RELEASE&#39;    // Mybatis    compile group: &#39;org.mybatis&#39;, name: &#39;mybatis&#39;, version: &#39;3.4.4&#39;    compile group: &#39;org.mybatis&#39;, name: &#39;mybatis-spring&#39;, version: &#39;1.3.1&#39;    compile group: &#39;org.mybatis.spring.boot&#39;, name: &#39;mybatis-spring-boot-starter&#39;, version: &#39;1.3.0&#39;}</code></pre><h3 id="创建-Spring-配置文件"><a href="#创建-Spring-配置文件" class="headerlink" title="创建 Spring 配置文件"></a>创建 Spring 配置文件</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Demo<span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8090</span><span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/parrom<span class="token punctuation">?</span>autoReconnect=true<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf8    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>    <span class="token key atrule">typeAliasesPackage</span><span class="token punctuation">:</span> com.farrom.domain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>farrom<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSourceFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>SqlSessionFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableTransactionManagement<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${datasource.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${datasource.driverClassName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driverClassName<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${datasource.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${datasource.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mybatis.typeAliasesPackage}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String typeAliasesPackage<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建数据源     * @Primary 该注解表示在同一个接口有多个实现类可以注入的时候，默认选择哪一个，而不是让@autowire注解报错     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        props.put("driverClassName", this.driverClassName); ##Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据数据源创建SqlSessionFactory     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SqlSessionFactoryBean sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据库-emoji-mysql-适配。"><a href="#数据库-emoji-mysql-适配。" class="headerlink" title="数据库 emoji mysql 适配。"></a>数据库 emoji mysql 适配。</h4><p>在根目录下的etc创建一个文件,<code>my.cnf</code>。在文件中设置配置</p><pre><code>[client]default-character-set=utf8mb4[mysql]default-character-set=utf8mb4[mysqld]character-set-client-handshake=FALSEcharacter-set-server=utf8mb4collation-server=utf8mb4_unicode_ciinit-connect=&#39;SET NAMES utf8mb4&#39;</code></pre><p>创建Database的时候选择 对一个的编码</p><p>该配置不需要设置任何代码。这个时候 sqlsession就已经创建好了</p><p>目前就学习了这点。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-220506113.jpg&quot; alt=&quot;&quot; title=&quot;我年华虚度，空有一身疲倦&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;开始前的闲聊&quot;&gt;&lt;a href=&quot;#开始前的闲聊&quot; class=&quot;headerlink&quot; title=&quot;开始前的闲聊&quot;&gt;&lt;/a&gt;开始前的闲聊&lt;/h2&gt;&lt;p&gt;一直都想回家，北京呆不起。想回家，却发现，家里的开发职位都是java的，，，那没办法，捡起来吧&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://www.msiter.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="java" scheme="http://www.msiter.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://www.msiter.com/tags/spring-boot/"/>
    
      <category term="mybatis" scheme="http://www.msiter.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Charles version 4.1 破解 以及 Https 的破译</title>
    <link href="http://www.msiter.com/2017/07/10/charles%204.1%20%E7%A0%B4%E8%A7%A3/"/>
    <id>http://www.msiter.com/2017/07/10/charles 4.1 破解/</id>
    <published>2017-07-10T13:26:00.000Z</published>
    <updated>2017-11-28T11:07:04.831Z</updated>
    
    <content type="html"><![CDATA[<p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-219218271.jpg" alt="" title="后来我终于知道,它并不是我的花,我只是恰好途径了它的盛放。"></p><h2 id="Charles-限时优惠"><a href="#Charles-限时优惠" class="headerlink" title="Charles 限时优惠"></a>Charles 限时优惠</h2><p>Charles 4 正版限时优惠优惠活动（限时：2016 年 8 月 8 日 - 15 日），优惠 30 元，<a href="https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=881336826&amp;activityId=8764822622de490a82ccc6383abce406" target="_blank" rel="noopener">点击领取优惠券</a>。</p><!--淘口令：Charles 新版发布，使用￥Charles￥限时特惠购买正版（长按复制整段文案，打开手机淘宝即可进入活动内容）--><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><img src="http://image.msiter.com/charles-logo.png"><p><a href="http://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a> 是在 Mac 下常用的网络封包截取工具，在做<br>移动开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。</p><a id="more"></a><p>Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p><p>除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议。配合 Charles 的 SSL 功能，Charles 还可以分析 Https 协议。</p><p>Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过 30 分钟，并且启动时将会有 10 秒种的延时。因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响。</p><p>Charles 主要的功能包括：</p><ol><li>截取 Http 和 Https 网络封包。</li><li>支持重发网络请求，方便后端调试。</li><li>支持修改网络请求参数。</li><li>支持网络请求的截获并动态修改。</li><li>支持模拟慢速网络。</li></ol><p>Charles 4 新增的主要功能包括：</p><ol><li>支持 Http 2。</li><li>支持 IPv6。</li></ol><h2 id="安装-Charles"><a href="#安装-Charles" class="headerlink" title="安装 Charles"></a>安装 Charles</h2><p>去 Charles 的官方网站（<a href="http://www.charlesproxy.com" target="_blank" rel="noopener">http://www.charlesproxy.com</a>）下载最新版的 Charles 安装包，是一个 dmg 后缀的文件。打开后将 Charles 拖到 Application 目录下即完成安装。</p><h2 id="将-Charles-设置成系统代理"><a href="#将-Charles-设置成系统代理" class="headerlink" title="将 Charles 设置成系统代理"></a>将 Charles 设置成系统代理</h2><p>之前提到，Charles 是通过将自己设置成代理服务器来完成封包截取的，所以使用 Charles 的第一步是将其设置成系统的代理服务器。</p><p>启动 Charles 后，第一次 Charles 会请求你给它设置系统代理的权限。你可以输入登录密码授予 Charles 该权限。你也可以忽略该请求，然后在需要将 Charles 设置成系统代理时，选择菜单中的 “Proxy” -&gt; “Mac OS X Proxy” 来将 Charles 设置成系统代理。如下所示：</p><img src="http://image.msiter.com/charles-pro-3.png"><p>之后，你就可以看到源源不断的网络请求出现在 Charles 的界面中。</p><p>需要注意的是，Chrome 和 Firefox 浏览器默认并不使用系统的代理服务器设置，而 Charles 是通过将自己设置成代理服务器来完成封包截取的，所以在默认情况下无法截取 Chrome 和 Firefox 浏览器的网络通讯内容。如果你需要截取的话，在 Chrome 中设置成使用系统的代理服务器设置即可，或者直接将代理服务器设置成 <code>127.0.0.1:8888</code> 也可达到相同效果。</p><h2 id="Charles-主界面介绍"><a href="#Charles-主界面介绍" class="headerlink" title="Charles 主界面介绍"></a>Charles 主界面介绍</h2><img src="http://image.msiter.com/charles-pro-4.png"><p>Charles 主要提供两种查看封包的视图，分别名为 “Structure” 和 “Sequence”。</p><ol><li>Structure 视图将网络请求按访问的域名分类。</li><li>Sequence 视图将网络请求按访问的时间排序。</li></ol><p>大家可以根据具体的需要在这两种视图之前来回切换。请求多了有些时候会看不过来，Charles 提供了一个简单的 Filter 功能，可以输入关键字来快速筛选出 URL 中带指定关键字的网络请求。</p><p>对于某一个具体的网络请求，你可以查看其详细的请求内容和响应内容。如果请求内容是 POST 的表单，Charles 会自动帮你将表单进行分项显示。如果响应内容是 JSON 格式的，那么 Charles 可以自动帮你将 JSON 内容格式化，方便你查看。如果响应内容是图片，那么 Charles 可以显示出图片的预览。</p><h2 id="过滤网络请求"><a href="#过滤网络请求" class="headerlink" title="过滤网络请求"></a>过滤网络请求</h2><p>通常情况下，我们需要对网络请求进行过滤，只监控向指定目录服务器上发送的请求。对于这种需求，以下几种办法：</p><p>方法一：在主界面的中部的 Filter 栏中填入需要过滤出来的关键字。例如我们的服务器的地址是：<code>http://yuantiku.com</code> , 那么只需要在 Filter 栏中填入 yuantiku 即可。</p><p>方法二：在 Charles 的菜单栏选择 “Proxy”-&gt;”Recording Settings”，然后选择 Include 栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。如下图所示：</p><img src="http://image.msiter.com/charles-filter-setting.jpg"><p>通常情况下，我们使用方法一做一些临时性的封包过滤，使用方法二做一些经常性的封包过滤。</p><p>方法三：在想过滤的网络请求上右击，选择 “Focus”，之后在 Filter 一栏勾选上 Focussed 一项，如下图所示：</p><img src="http://image.msiter.com/charles-focus.png"><p>这种方式可以临时性的，快速地过滤出一些没有通过关键字的一类网络请求。</p><h2 id="截取-iPhone-上的网络封包"><a href="#截取-iPhone-上的网络封包" class="headerlink" title="截取 iPhone 上的网络封包"></a>截取 iPhone 上的网络封包</h2><p>Charles 通常用来截取本地上的网络封包，但是当我们需要时，我们也可以用来截取其它设备上的网络请求。下面我就以 iPhone 为例，讲解如何进行相应操作。</p><h3 id="Charles-上的设置"><a href="#Charles-上的设置" class="headerlink" title="Charles 上的设置"></a>Charles 上的设置</h3><p>要截取 iPhone 上的网络请求，我们首先需要将 Charles 的代理功能打开。在 Charles 的菜单栏上选择 “Proxy”-&gt;”Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 就完成了在 Charles 上的设置。如下图所示:</p><img src="http://image.msiter.com/charles-proxy-setting.jpg"><h3 id="iPhone-上的设置"><a href="#iPhone-上的设置" class="headerlink" title="iPhone 上的设置"></a>iPhone 上的设置</h3><p>首先我们需要获取 Charles 运行所在电脑的 IP 地址，Charles 的顶部菜单的 “Help”-&gt;”Local IP Address”，即可在弹出的对话框中看到 IP 地址，如下图所示：</p><img src="http://image.msiter.com/charles-local-ip.png"><p>在 iPhone 的 “ 设置 “-&gt;” 无线局域网 “ 中，可以看到当前连接的 wifi 名，通过点击右边的详情键，可以看到当前连接上的 wifi 的详细信息，包括 IP 地址，子网掩码等信息。在其最底部有「HTTP 代理」一项，我们将其切换成手动，然后填上 Charles 运行所在的电脑的 IP，以及端口号 8888，如下图所示：</p><img src="http://image.msiter.com/charles-iphone-setting.jpg"><p>设置好之后，我们打开 iPhone 上的任意需要网络通讯的程序，就可以看到 Charles 弹出 iPhone 请求连接的确认菜单（如下图所示），点击 “Allow” 即可完成设置。</p><img src="http://image.msiter.com/charles-proxy-confirm.jpg"><h2 id="截取-Https-通讯信息"><a href="#截取-Https-通讯信息" class="headerlink" title="截取 Https 通讯信息"></a>截取 Https 通讯信息</h2><h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><p>如果你需要截取分析 Https 协议相关的内容。那么需要安装 Charles 的 CA 证书。具体步骤如下。</p><p>首先我们需要在 Mac 电脑上安装证书。点击 Charles 的顶部菜单，选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate”，然后输入系统的帐号密码，即可在 KeyChain 看到添加好的证书。如下图所示：</p><img src="http://image.msiter.com/charles-pro-1.png"><p>需要注意的是，即使是安装完证书之后，Charles 默认也并不截取 Https 网络通讯的信息，如果你想对截取某个网站上的所有 Https 网络请求，可以在该请求上右击，选择 SSL proxy，如下图所示：</p><img src="http://image.msiter.com/charles-ssl-add-host.jpg"><p>这样，对于该 Host 的所有 SSL 请求可以被截取到了。</p><h3 id="截取移动设备中的-Https-通讯信息"><a href="#截取移动设备中的-Https-通讯信息" class="headerlink" title="截取移动设备中的 Https 通讯信息"></a>截取移动设备中的 Https 通讯信息</h3><p>如果我们需要在 iOS 或 Android 机器上截取 Https 协议的通讯内容，还需要在手机上安装相应的证书。点击 Charles 的顶部菜单，选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate on a Mobile Device or Remote Browser”，然后就可以看到 Charles 弹出的简单的安装教程。如下图所示：</p><img src="http://image.msiter.com/charles-pro-2.png"><p>按照我们之前说的教程，在设备上设置好 Charles 为代理后，在手机浏览器中访问地址：<a href="http://charlesproxy.com/getssl" target="_blank" rel="noopener">http://charlesproxy.com/getssl</a>，即可打开证书安装的界面，安装完证书后，就可以截取手机上的 Https 通讯内容了。不过同样需要注意，默认情况下 Charles 并不做截取，你还需要在要截取的网络请求上右击，选择 SSL proxy 菜单项。</p><h2 id="模拟慢速网络"><a href="#模拟慢速网络" class="headerlink" title="模拟慢速网络"></a>模拟慢速网络</h2><p>在做移动开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles 对此需求提供了很好的支持。</p><p>在 Charles 的菜单上，选择 “Proxy”-&gt;”Throttle Setting” 项，在之后弹出的对话框中，我们可以勾选上 “Enable Throttling”，并且可以设置 Throttle Preset 的类型。如下图所示：</p><img src="http://image.msiter.com/charles-throttle-setting.jpg"><p>如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的 “Only for selected hosts” 项，然后在对话框的下半部分设置中增加指定的 hosts 项即可。</p><h2 id="修改网络请求内容"><a href="#修改网络请求内容" class="headerlink" title="修改网络请求内容"></a>修改网络请求内容</h2><p>有些时候为了调试服务器的接口，我们需要反复尝试不同参数的网络请求。Charles 可以方便地提供网络请求的修改和重发功能。只需要在以往的网络请求上点击右键，选择 “Edit”，即可创建一个可编辑的网络请求。如下所示：</p><img src="http://image.msiter.com/charles-edit.png"><p>我们可以修改该请求的任何信息，包括 URL 地址、端口、参数等，之后点击 “Execute” 即可发送该修改后的网络请求（如下图所示）。Charles 支持我们多次修改和发送该请求，这对于我们和服务器端调试接口非常方便，如下图所示：</p><img src="http://image.msiter.com/charles-execute.png"><h2 id="给服务器做压力测试"><a href="#给服务器做压力测试" class="headerlink" title="给服务器做压力测试"></a>给服务器做压力测试</h2><p>我们可以使用 Charles 的 Repeat 功能来简单地测试服务器的并发处理能力，方法如下。</p><p>我们在想打压的网络请求上（POST 或 GET 请求均可）右击，然后选择 「Repeat Advanced」菜单项，如下所示：</p><img src="http://image.msiter.com/charles-repeat-1.png"><p>接着我们就可以在弹出的对话框中，选择打压的并发线程数以及打压次数，确定之后，即可开始打压。</p><img src="http://image.msiter.com/charles-repeat-2.png"><p>悄悄说一句，一些写得很弱的投票网站，也可以用这个办法来快速投票。当然，我也拿 Charles 的 Repeat 功能给一些诈骗的钓鱼网站喂了不少垃圾数据，上次不小心还把一个钓鱼网站的数据库打挂了，嗯，请叫我雷锋。</p><h2 id="修改服务器返回内容"><a href="#修改服务器返回内容" class="headerlink" title="修改服务器返回内容"></a>修改服务器返回内容</h2><p>有些时候我们想让服务器返回一些指定的内容，方便我们调试一些特殊情况。例如列表页面为空的情况，数据异常的情况，部分耗时的网络请求超时的情况等。如果没有 Charles，要服务器配合构造相应的数据显得会比较麻烦。这个时候，使用 Charles 相关的功能就可以满足我们的需求。</p><p>根据具体的需求，Charles 提供了 Map 功能、 Rewrite 功能以及 Breakpoints 功能，都可以达到修改服务器返回内容的目的。这三者在功能上的差异是：</p><ol><li>Map 功能适合长期地将某一些请求重定向到另一个网络地址或本地文件。</li><li>Rewrite 功能适合对网络请求进行一些正则替换。</li><li>Breakpoints 功能适合做一些临时性的修改。</li></ol><h3 id="Map-功能"><a href="#Map-功能" class="headerlink" title="Map 功能"></a>Map 功能</h3><p>Charles 的 Map 功能分 Map Remote 和 Map Local 两种，顾名思义，Map Remote 是将指定的网络请求重定向到另一个网址请求地址，Map Local 是将指定的网络请求重定向到本地文件。</p><p>在 Charles 的菜单中，选择 “Tools”-&gt;”Map Remote” 或 “Map Local” 即可进入到相应功能的设置页面。</p><img src="http://image.msiter.com/charles-map.png"><p>对于 Map Remote 功能，我们需要分别填写网络重定向的源地址和目的地址，对于不需要限制的条件，可以留空。下图是一个示例，我将所有 <code>ytk1.yuanku.ws</code>（测试服务器）的请求重定向到了 <code>www.yuantiku.com</code>（线上服务器）。</p><img src="http://image.msiter.com/charles-map-remote.png"><p>对于 Map Local 功能，我们需要填写的重定向的源地址和本地的目标文件。对于有一些复杂的网络请求结果，我们可以先使用 Charles 提供的 “Save Response…” 功能，将请求结果保存到本地（如下图所示），然后稍加修改，成为我们的目标映射文件。</p><img src="http://image.msiter.com/charles-save-response.png"><p>下图是一个示例，我将一个指定的网络请求通过 Map Local 功能映射到了本地的一个经过修改的文件中。</p><img src="http://image.msiter.com/charles-map-local.png"><p>Map Local 在使用的时候，有一个潜在的问题，就是其返回的 Http Response Header 与正常的请求并不一样。这个时候如果客户端校验了 Http Response Header 中的部分内容，就会使得该功能失效。解决办法是同时使用 Map Local 以下面提到的 Rewrite 功能，将相关的 Http 头 Rewrite 成我们希望的内容。</p><h3 id="Rewrite-功能"><a href="#Rewrite-功能" class="headerlink" title="Rewrite 功能"></a>Rewrite 功能</h3><p>Rewrite 功能功能适合对某一类网络请求进行一些正则替换，以达到修改结果的目的。</p><p>例如，我们的客户端有一个 API 请求是获得用户昵称，而我当前的昵称是 “tangqiaoboy”，如下所示：</p><img src="http://image.msiter.com/charles-rewrite-1.jpeg"><p>我们想试着直接修改网络返回值，将 tangqiaoboy 换成成 iosboy。于是我们启用 Rewrite 功能，然后设置如下的规则：</p><img src="http://image.msiter.com/charles-rewrite-2.png"><p>完成设置之后，我们就可以从 Charles 中看到，之后的 API 获得的昵称被自动 Rewrite 成了 iosboy，如下图所示：</p><img src="http://image.msiter.com/charles-rewrite-3.png"><h3 id="Breakpoints-功能"><a href="#Breakpoints-功能" class="headerlink" title="Breakpoints 功能"></a>Breakpoints 功能</h3><p>上面提供的 Rewrite 功能最适合做批量和长期的替换，但是很多时候，我们只是想临时修改一次网络请求结果，这个时候，使用 Rewrite 功能虽然也可以达到目的，但是过于麻烦，对于临时性的修改，我们最好使用 Breakpoints 功能。</p><p>Breakpoints 功能类似我们在 Xcode 中设置的断点一样，当指定的网络请求发生时，Charles 会截获该请求，这个时候，我们可以在 Charles 中临时修改网络请求的返回内容。</p><p>下图是我们临时修改获取用户信息的 API，将用户的昵称进行了更改，修改完成后点击 “Execute” 则可以让网络请求继续进行。</p><img src="http://image.msiter.com/charles-breakpoint.png"><p>需要注意的是，使用 Breakpoints 功能将网络请求截获并修改过程中，整个网络请求的计时并不会暂停，所以长时间的暂停可能导致客户端的请求超时。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>Charles 的反向代理功能允许我们将本地的端口映射到远程的另一个端口上。例如，在下图中，我将本机的 61234 端口映射到了远程（www.yuantiku.com）的80端口上了。这样，当我访问本地的 61234 端口时，实际返回的内容会由 www.yuantiku.com 的 80 端口提供。</p><img src="http://image.msiter.com/charles-reverse-proxy.jpg"><h2 id="设置外部代理，解决与翻墙软件的冲突"><a href="#设置外部代理，解决与翻墙软件的冲突" class="headerlink" title="设置外部代理，解决与翻墙软件的冲突"></a>设置外部代理，解决与翻墙软件的冲突</h2><p>Charles 的原理是把自己设置成系统的代理服务器，但是在中国，由于工作需要，我们常常需要使用 Google 搜索，所以大部分程序员都有自己的翻墙软件，而这些软件的基本原理，也是把自己设置成系统的代理服务器，来做到透明的翻墙。</p><p>为了使得两者能够和平共处，我们可以在 Charles 的 <code>External Proxy Settings</code> 中，设置翻墙的代理端口以及相关信息。同时，我们也要关闭相关翻墙软件的自动设置，使其不主动修改系统代理，避免 Charles 失效。</p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><ol><li>下载特定的版本的<a href="http://image.msiter.com/charles-proxy-4.1.dmg" target="_blank" rel="noopener">Charles</a>以及破解文件 <a href="http://image.msiter.com/charles.jar" target="_blank" rel="noopener">charles.jar</a></li><li>在应用程序中右键Charles，选择“显示包内容”。</li><li>依次打开目录：Contents -&gt; Java</li><li>用下载的charles.jar替换目录中的charles.jar。</li><li>重新打开后还是破解失败的所以需要 点击 Help -&gt; Register Charles 随便输入即可破解完成</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 Charles 软件，我们可以很方便地在日常开发中，截取和调试网络请求内容，分析封包协议以及模拟慢速网络。用好 Charles 可以极大的方便我们对于带有网络请求的 App 的开发和调试。</p><p>愿本文帮助大家成为 Charles 的专家，祝大家玩得开心～</p><blockquote><p>本文全部引用自 唐巧的 <a href="http://blog.devtang.com/2015/11/14/charles-introduction/" target="_blank" rel="noopener">Charles 从入门到精通</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-219218271.jpg&quot; alt=&quot;&quot; title=&quot;后来我终于知道,它并不是我的花,我只是恰好途径了它的盛放。&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Charles-限时优惠&quot;&gt;&lt;a href=&quot;#Charles-限时优惠&quot; class=&quot;headerlink&quot; title=&quot;Charles 限时优惠&quot;&gt;&lt;/a&gt;Charles 限时优惠&lt;/h2&gt;&lt;p&gt;Charles 4 正版限时优惠优惠活动（限时：2016 年 8 月 8 日 - 15 日），优惠 30 元，&lt;a href=&quot;https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=881336826&amp;amp;activityId=8764822622de490a82ccc6383abce406&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击领取优惠券&lt;/a&gt;。&lt;/p&gt;
&lt;!--
淘口令：Charles 新版发布，使用￥Charles￥限时特惠购买正版（长按复制整段文案，打开手机淘宝即可进入活动内容）
--&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;img src=&quot;http://image.msiter.com/charles-logo.png&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.charlesproxy.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Charles&lt;/a&gt; 是在 Mac 下常用的网络封包截取工具，在做&lt;br&gt;移动开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。&lt;/p&gt;
    
    </summary>
    
      <category term="开发帮助" scheme="http://www.msiter.com/categories/%E5%BC%80%E5%8F%91%E5%B8%AE%E5%8A%A9/"/>
    
    
      <category term="ios" scheme="http://www.msiter.com/tags/ios/"/>
    
      <category term="约束教程" scheme="http://www.msiter.com/tags/%E7%BA%A6%E6%9D%9F%E6%95%99%E7%A8%8B/"/>
    
      <category term="破解" scheme="http://www.msiter.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="抓包" scheme="http://www.msiter.com/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>travis-ci 来维护 Cocoapods</title>
    <link href="http://www.msiter.com/2017/05/25/travis-ci%20%E6%9D%A5%E7%BB%B4%E6%8A%A4%20Cocoapods/"/>
    <id>http://www.msiter.com/2017/05/25/travis-ci 来维护 Cocoapods/</id>
    <published>2017-05-25T18:54:00.000Z</published>
    <updated>2017-11-28T11:07:04.831Z</updated>
    
    <content type="html"><![CDATA[<p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-213307611.jpg" alt="" title="人的一切痛苦，本质上都是对自己的无能的愤怒。——王小波"></p><h2 id="教程开始前的废话连篇"><a href="#教程开始前的废话连篇" class="headerlink" title="教程开始前的废话连篇"></a>教程开始前的废话连篇</h2><p>我们公司的app，是在是火不聊了。那么办法了，我们抽象出来一个sdk给别人接吧。这样子的话，我们怎么也可以有些量啊。</p><p>最开始使用的Cocoapods 全部代码开发的方式来制作的，在跨过一个又一个的大坑之后，终于到了，要把代码达成 <code>.a</code> 包地步，其实是可以达成 <code>.framework</code> 的。主要是还是因为代码需要兼容 ios 7 。<br>所以必须要使用 达成 static 的方式。</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>首先使用的打包命令，肯定是 <code>xcodebuild</code> 不要问我，如何使用，google吧。</p><p>我们使用的命令时</p><pre class="line-numbers language-shell"><code class="language-shell">xcodebuild build -project Pods/Pods.xcodeproj -target OddityOcUI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样子打下来是默认 Iphone sdk版本+realese 版本的，这样子只在真机上运行肯定是没问题啦～</p><p>但是你怎么都得做到可以在模拟器上跑吧。所以就需要接下来的这一句了。</p><pre class="line-numbers language-shell"><code class="language-shell">xcodebuild build -project Pods/Pods.xcodeproj -target OddityOcUI -sdk iphonesimulator10.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面的是 sdk 版本，不知道版本的可以运行命令</p><pre class="line-numbers language-shell"><code class="language-shell">xcodebuild -showsdks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="现在开始整合-travis-ci"><a href="#现在开始整合-travis-ci" class="headerlink" title="现在开始整合 travis-ci"></a>现在开始整合 travis-ci</h3><p>既然都找到这里了，我就不跟你bb那么多了。其实我们最多不会写 yml文件嘛。</p><p>因为 budild 会遇见非常多的log，我为了解决，尝试使用了。<code>xcpretty</code> 事实证明……   没啥用处。先放着吧。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> objective<span class="token punctuation">-</span>c<span class="token key atrule">osx_image</span><span class="token punctuation">:</span> xcode8.3<span class="token key atrule">os</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> osx<span class="token key atrule">branches</span><span class="token punctuation">:</span>  <span class="token key atrule">only</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> master<span class="token key atrule">before_install</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> gem install xcpretty<span class="token key atrule">install</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> pod install <span class="token punctuation">-</span><span class="token punctuation">-</span>repo<span class="token punctuation">-</span>update<span class="token key atrule">before_script</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.name ""  <span class="token punctuation">-</span> git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.email ""  <span class="token punctuation">-</span> git clone $<span class="token punctuation">{</span>CocoaPodsRepo<span class="token punctuation">}</span><span class="token key atrule">script</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> set <span class="token punctuation">-</span>o pipefail &amp;&amp; xcodebuild build <span class="token punctuation">-</span>project Pods/Pods.xcodeproj <span class="token punctuation">-</span>target OddityOcUI <span class="token punctuation">|</span> xcpretty <span class="token punctuation">-</span>c  <span class="token punctuation">-</span> set <span class="token punctuation">-</span>o pipefail &amp;&amp; xcodebuild build <span class="token punctuation">-</span>project Pods/Pods.xcodeproj <span class="token punctuation">-</span>target OddityOcUI <span class="token punctuation">-</span>sdk iphonesimulator10.3 <span class="token punctuation">|</span> xcpretty <span class="token punctuation">-</span>c  <span class="token punctuation">-</span> lipo <span class="token punctuation">-</span>create build/Release<span class="token punctuation">-</span>iphoneos/OddityOcUI/libOddityOcUI.a build/Release<span class="token punctuation">-</span>iphonesimulator/OddityOcUI/libOddityOcUI.a  <span class="token punctuation">-</span>output libOddityOcUI.a<span class="token key atrule">after_success</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> bash operation.sh    <span class="token punctuation">-</span> cd OddityUI    <span class="token punctuation">-</span> git add .    <span class="token punctuation">-</span> git commit <span class="token punctuation">-</span>m '更新通用静态包'    <span class="token punctuation">-</span> git push <span class="token punctuation">-</span><span class="token punctuation">-</span>force <span class="token punctuation">-</span><span class="token punctuation">-</span>quiet "https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>PersonalAccessTokens<span class="token punctuation">}</span>@$<span class="token punctuation">{</span>GtiHubUrlRepo<span class="token punctuation">}</span>" master<span class="token punctuation">:</span>master    <span class="token punctuation">-</span> git tag $<span class="token punctuation">{</span>GtiHubTagVersion<span class="token punctuation">}</span>    <span class="token punctuation">-</span> git push <span class="token punctuation">-</span><span class="token punctuation">-</span>force <span class="token punctuation">-</span><span class="token punctuation">-</span>quiet "https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>PersonalAccessTokens<span class="token punctuation">}</span>@$<span class="token punctuation">{</span>GtiHubUrlRepo<span class="token punctuation">}</span>" $<span class="token punctuation">{</span>GtiHubTagVersion<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>GtiHubTagVersion<span class="token punctuation">}</span><span class="token key atrule">env</span><span class="token punctuation">:</span> <span class="token key atrule">global</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">GtiHubTagVersion</span><span class="token punctuation">:</span> 0.3.2    <span class="token punctuation">-</span> <span class="token key atrule">GtiHubUrlRepo</span><span class="token punctuation">:</span> github.com/OddityUI/OddityUI.git    <span class="token punctuation">-</span> <span class="token key atrule">CocoaPodsRepo</span> <span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/OddityUI/OddityUI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img class = &quot;g-pl-90&quot;  src=&quot;http://image.msiter.com/stock-photo-213307611.jpg&quot; alt=&quot;&quot; title=&quot;人的一切痛苦，本质上都是对自己的无能的愤怒。——王小波&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;教
      
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="ios" scheme="http://www.msiter.com/tags/ios/"/>
    
      <category term="travis-ci" scheme="http://www.msiter.com/tags/travis-ci/"/>
    
      <category term="cocoapods" scheme="http://www.msiter.com/tags/cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>奇怪的 unrecognized selector sent to instance 问题</title>
    <link href="http://www.msiter.com/2017/05/18/%E5%A5%87%E6%80%AA%E7%9A%84%20unrecognized%20selector%20sent%20to%20instance%20%E9%97%AE%E9%A2%98/"/>
    <id>http://www.msiter.com/2017/05/18/奇怪的 unrecognized selector sent to instance 问题/</id>
    <published>2017-05-18T15:39:00.000Z</published>
    <updated>2017-11-28T11:07:04.831Z</updated>
    
    <content type="html"><![CDATA[<p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-212311441.jpg" alt="" title=" &quot;Nuts！&quot; —— 101空降师副师长麦考里夫将军"></p><a id="more"></a><p>我做了一个 黑夜模式 和 白天模式的切换。<br>在ios8.3 的设备上发现了一个问题，会导致崩溃。控制台打出各种奇怪的问题……</p><pre><code>unrecognized selector sent to instance</code></pre><p>各种对象的</p><p>包括 <code>NSURL</code>,<code>UIView</code>,<code>_FCString</code>… 等等，我当时就蒙了，，我到底写出了什么样子的代码……    </p><p>他最终报错的地方我发送 <code>NSnotifition</code>的地方，也不具体跳到某一个崩溃的位置。</p><p>后来想了一下 <code>unrecognized selector sent to instance</code> 是由于已经销毁了，还调用。并且我的崩溃对象千奇百怪的。崩溃在发送通知的地方。那么问题大概就是出现在这里了吧。我尝试在每一个地方都进行了 <code>dealloc</code>移除通知的方法。果然，问题消失。其实我只移除了一个我自定义的UIView的通知，其他的UIViewControoler，没有移除也是没问题。只是为了保证百分之百……</p><p>猜测：</p><ol><li>ios8.3的问题，在销毁后没有移除我的通知</li><li>引起各种对象的崩溃的原因，估计是因为新的对象占据了理论上销毁的对象的 物理地址<br><div class="pixels-photo"><br><p><br> <img src="https://drscdn.500px.org/photo/212311441/m%3D900/50cfce955bc5969aeeb03ca97aaabf7c" alt="Autumn Poetry by Daniel F. on 500px.com"><br></p><br><a href="https://500px.com/photo/212311441/autumn-poetry-by-daniel-f-" alt="Autumn Poetry by Daniel F. on 500px.com" target="_blank" rel="noopener"></a><br></div><script type="text/javascript" src="https://500px.com/embed.js"></script></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-212311441.jpg&quot; alt=&quot;&quot; title=&quot; &amp;quot;Nuts！&amp;quot; —— 101空降师副师长麦考里夫将军&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="ios" scheme="http://www.msiter.com/tags/ios/"/>
    
      <category term="error" scheme="http://www.msiter.com/tags/error/"/>
    
      <category term="奇怪的问题" scheme="http://www.msiter.com/tags/%E5%A5%87%E6%80%AA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>八爪鱼 获取用户鼠标悬浮层级</title>
    <link href="http://www.msiter.com/2017/05/17/%E5%85%AB%E7%88%AA%E9%B1%BC%20%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E9%BC%A0%E6%A0%87%E6%82%AC%E6%B5%AE%E5%B1%82%E7%BA%A7/"/>
    <id>http://www.msiter.com/2017/05/17/八爪鱼 获取用户鼠标悬浮层级/</id>
    <published>2017-05-17T14:40:00.000Z</published>
    <updated>2017-11-28T11:07:04.831Z</updated>
    
    <content type="html"><![CDATA[<p>公司一直再做新闻聚合，导致我们公司一直在爬取新闻，爬取各种软件的新闻资讯。</p><p>后来老板突发奇想，我们不如做一个八抓鱼把…… 那么找了两个同事，预言了一下。那就做吧，之后同时qt开发，紧锣密鼓的展开了。</p><p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-212226679.jpg" alt="" title="只有强者才懂得斗争，弱者甚至失败都不够资格，他们生来就是被征服的"></p><a id="more"></a><p>中途，我们一起聊天的时候，就说到了八抓鱼，是小白用户使用的，所以他们想爬取的内容层级，都是鼠标选中的。所以想做一个鼠标选择dom的js。跟我吐了一会苦水。<br>那个时候不太忙，再加上那会儿我刚做完 新闻详情页的js，觉的有些经验。立马拍胸脯，我来。就有了接下来的代码。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Created by Administrator on 2016/11/2. */</span><span class="token comment" spellcheck="true">/* 方法说明 * @method 方法名 * @for 所属类名 * @param {参数类型} 参数名 参数说明 * @return {返回值类型} 返回值说明 */</span><span class="token comment" spellcheck="true">// window.onload=function(){</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//     var p = CreateShowDomXmlLabel();</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//     document.body.onmousemove = function(e) {</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//         var dom = e.target;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//         HandleSuspendViewMethod(dom);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//         p.innerText = GetDomObjectAllFatherDomName(dom);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//         RemoveSuspendView(); // 移除之前的显示遮挡层</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//         var div = CreateSuspendView(dom); // 创建现在的遮挡层</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//         document.body.insertBefore(div,p);</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">CreateShowDomXmlLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dom <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    <span class="token function">HandleSuspendViewMethod</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RemoveSuspendView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 移除之前的显示遮挡层</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">CreateSuspendView</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">updateLabelLocationMethod</span><span class="token punctuation">(</span><span class="token function">GetDomObjectAllFatherDomName</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">///  用户当前操作的 dom 结构体</span><span class="token keyword">var</span> CurrentDomXML<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 用户创建的遮挡层的id 名称</span><span class="token keyword">var</span> SuspendViewID <span class="token operator">=</span> <span class="token string">"OddityUISuspendView"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 处理用户滑动时间的开始，如果用户更换了鼠标的对象则 进行接下来的操作。否则就直接返回 * @method HandleSuspendViewMethod * @param {HTMLElment} e 用户当前滑动位置的dom结构对象 */</span><span class="token keyword">function</span> <span class="token function">HandleSuspendViewMethod</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> CurrentDomXML<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    CurrentDomXML <span class="token operator">=</span> e<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 移除之前创建的 SuspendView * @method RemoveSuspendView */</span><span class="token keyword">function</span> <span class="token function">RemoveSuspendView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> removeStr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>SuspendViewID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>removeStr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        removeStr<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>removeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取控件左绝对位置</span><span class="token keyword">function</span> <span class="token function">getAbsoluteLeft</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    oLeft <span class="token operator">=</span> o<span class="token punctuation">.</span>offsetLeft    <span class="token keyword">while</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>offsetParent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oParent <span class="token operator">=</span> o<span class="token punctuation">.</span>offsetParent        oLeft <span class="token operator">+</span><span class="token operator">=</span> oParent<span class="token punctuation">.</span>offsetLeft        o <span class="token operator">=</span> oParent    <span class="token punctuation">}</span>    <span class="token keyword">return</span> oLeft<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取控件上绝对位置</span><span class="token keyword">function</span> <span class="token function">getAbsoluteTop</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    oTop <span class="token operator">=</span> o<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>offsetParent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oParent <span class="token operator">=</span> o<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>        oTop <span class="token operator">+</span><span class="token operator">=</span> oParent<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        o <span class="token operator">=</span> oParent    <span class="token punctuation">}</span>    <span class="token keyword">return</span> oTop<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 创建遮挡层 根据 传入的 对象的 绝对定位 设置 遮挡层的 位置。以及 遮挡层的 透明度。穿透属性 * @method CreateSuspendView * @param {HTMLElment} e 用户当前滑动位置的dom结构对象 */</span><span class="token keyword">function</span> <span class="token function">CreateSuspendView</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>id <span class="token operator">=</span> SuspendViewID<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">///  设置div的 黑色 和透明</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0.4</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderColor <span class="token operator">=</span> <span class="token string">"red"</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> dom<span class="token punctuation">.</span>offsetWidth <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> dom<span class="token punctuation">.</span>offsetHeight <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token number">99999</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderStyle <span class="token operator">=</span> <span class="token string">"solid"</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token function">getAbsoluteTop</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">getAbsoluteLeft</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 设置鼠标的穿透 效果</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>pointerEvents <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> div<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// 创建　显示　DOM　结构的　Label</span><span class="token keyword">function</span> <span class="token function">CreateShowDomXmlLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">"center"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>lineHeight <span class="token operator">=</span> <span class="token string">"30px"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">"30px"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token number">999991</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">"0px"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 设置鼠标的穿透 效果</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>pointerEvents <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// 根据传入的 dom 返回 dom 树 字符串</span><span class="token keyword">function</span> <span class="token function">GetDomObjectAllFatherDomName</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> domName <span class="token operator">=</span> <span class="token string">"[ - "</span> <span class="token operator">+</span> dom<span class="token punctuation">.</span>nodeName<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>dom<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        domName <span class="token operator">=</span> dom<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>nodeName <span class="token operator">+</span> <span class="token string">" > "</span> <span class="token operator">+</span> domName<span class="token punctuation">;</span>        dom <span class="token operator">=</span> dom<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> domName<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - ]"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">updateLabelLocationMethod</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> div<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>innerText <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token keyword">var</span> topLocation <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetTop<span class="token number">-40</span>    <span class="token keyword">var</span> leftLocation <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetLeft    <span class="token keyword">if</span> <span class="token punctuation">(</span>topLocation <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        topLocation <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetHeight <span class="token operator">+</span> div<span class="token punctuation">.</span>offsetTop <span class="token operator">+</span> <span class="token number">10</span>    <span class="token punctuation">}</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> topLocation <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> leftLocation <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> div<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试方法，找到任意浏览器，打开开发者模式。在console控制台，复制粘贴这些代码就可以看到效果了。</p><p>其实真的是为了凑博客数的……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司一直再做新闻聚合，导致我们公司一直在爬取新闻，爬取各种软件的新闻资讯。&lt;/p&gt;
&lt;p&gt;后来老板突发奇想，我们不如做一个八抓鱼把…… 那么找了两个同事，预言了一下。那就做吧，之后同时qt开发，紧锣密鼓的展开了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-212226679.jpg&quot; alt=&quot;&quot; title=&quot;只有强者才懂得斗争，弱者甚至失败都不够资格，他们生来就是被征服的&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web 前端" scheme="http://www.msiter.com/categories/Web-%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="八爪鱼" scheme="http://www.msiter.com/tags/%E5%85%AB%E7%88%AA%E9%B1%BC/"/>
    
      <category term="html" scheme="http://www.msiter.com/tags/html/"/>
    
      <category term="js" scheme="http://www.msiter.com/tags/js/"/>
    
      <category term="Javascript" scheme="http://www.msiter.com/tags/Javascript/"/>
    
      <category term="鼠标悬浮" scheme="http://www.msiter.com/tags/%E9%BC%A0%E6%A0%87%E6%82%AC%E6%B5%AE/"/>
    
  </entry>
  
  <entry>
    <title>WKWebView IOS8 下 loadHtmlString错误</title>
    <link href="http://www.msiter.com/2017/05/17/WKWebView%20IOS8%20%E4%B8%8B%20loadHtmlString%E9%94%99%E8%AF%AF/"/>
    <id>http://www.msiter.com/2017/05/17/WKWebView IOS8 下 loadHtmlString错误/</id>
    <published>2017-05-17T14:40:00.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-212184725.jpg" alt="" title="不是现实支撑的梦想，而是梦想支撑了现实。——星空日记"></p><a id="more"></a><p>做项目的时候，需要展示新闻详情。经过一系列的调研，最终选定为使用 webview。<br>因为需要支持ios7，所以我在详情页就需要同时具备 UIWebView 和 WKWebView，两种。<br>由于IOS8才开始出现的WKWebView，所以自然而然的我当然想从ios8就是用WkwebVIew。毕竟性能好，，，各种夸<br>但是很快就遇见一个问题，本来呢，在ios9，ios10 ，我直接调用方法就可以。</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token punctuation">[</span>_wkWebView loadHTMLString<span class="token punctuation">:</span>htmlStr baseURL<span class="token punctuation">:</span><span class="token punctuation">[</span>NSBundle oddity_shareBundle<span class="token punctuation">]</span><span class="token punctuation">.</span>bundleURL<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在htmlStr 里面，我有设置的 本地图片，本地js，本地css。在 ios9-10 一切OK。但是偏偏ios8不行，加载出来本地图片，但是本地js本地css加载不出来……      </p><p>一顿谷歌，没找到……  最终心思，那成，放弃吧……  直接ios7-8 都是用 UIWebView吧。</p><p>找到了一些<a href="http://stackoverflow.com/questions/24882834/wkwebview-not-loading-local-files-under-ios-8" target="_blank" rel="noopener">参考</a></p><p>但是，后来有次无聊的时候，想到了，把js和css全部放在html字符串不就好了吗？</p><p>于是乎，有了这样子的一段代码</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>UIDevice currentDevice<span class="token punctuation">]</span> systemVersion<span class="token punctuation">]</span> floatValue<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">8.0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>UIDevice currentDevice<span class="token punctuation">]</span> systemVersion<span class="token punctuation">]</span> floatValue<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">9.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        NSString <span class="token operator">*</span>file1 <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span>NSBundle oddity_shareBundle<span class="token punctuation">]</span> pathForResource<span class="token punctuation">:</span><span class="token string">@"jquery"</span> ofType<span class="token punctuation">:</span><span class="token string">@"js"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        NSString <span class="token operator">*</span>file2 <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span>NSBundle oddity_shareBundle<span class="token punctuation">]</span> pathForResource<span class="token punctuation">:</span><span class="token string">@"bootstrap.min"</span> ofType<span class="token punctuation">:</span><span class="token string">@"css"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        NSString <span class="token operator">*</span>file3 <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span>NSBundle oddity_shareBundle<span class="token punctuation">]</span> pathForResource<span class="token punctuation">:</span><span class="token string">@"content"</span> ofType<span class="token punctuation">:</span><span class="token string">@"css"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file1 <span class="token operator">&amp;&amp;</span> file2 <span class="token operator">&amp;&amp;</span> file3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            NSString <span class="token operator">*</span>fileStr1 <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithContentsOfFile<span class="token punctuation">:</span>file1 encoding<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUTF8StringEncoding<span class="token punctuation">)</span> error<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>            NSString <span class="token operator">*</span>fileStr2 <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithContentsOfFile<span class="token punctuation">:</span>file2 encoding<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUTF8StringEncoding<span class="token punctuation">)</span> error<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>            NSString <span class="token operator">*</span>fileStr3 <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithContentsOfFile<span class="token punctuation">:</span>file3 encoding<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUTF8StringEncoding<span class="token punctuation">)</span> error<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>            topHeader <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@"&lt;script type=\"text/javascript\">%@&lt;/script>&lt;style type=\"text/css\">%@&lt;/style>&lt;style type=\"text/css\">%@&lt;/style>"</span><span class="token punctuation">,</span>fileStr1<span class="token punctuation">,</span>fileStr2<span class="token punctuation">,</span>fileStr3<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实还可以优化的，比如这个文件其实礼物上只需要读取一次就可以的，但是我现在会每次都读取，这个时候就可以做一个缓存。或者其他云云。</p><p>我这里只是提供一个思路。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-212184725.jpg&quot; alt=&quot;&quot; title=&quot;不是现实支撑的梦想，而是梦想支撑了现实。——星空日记&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="WKWebView" scheme="http://www.msiter.com/tags/WKWebView/"/>
    
      <category term="Systematic distinction" scheme="http://www.msiter.com/tags/Systematic-distinction/"/>
    
  </entry>
  
  <entry>
    <title>Html 字符串转换成 AttributedString ios版本下的错误</title>
    <link href="http://www.msiter.com/2017/05/17/Html%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%20AttributedString%20ios%E7%89%88%E6%9C%AC%E4%B8%8B%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://www.msiter.com/2017/05/17/Html 字符串转换成 AttributedString ios版本下的错误/</id>
    <published>2017-05-17T14:31:00.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<p>在ios中想要把html字符串转换成 AttributedString ，需要使用以下方法</p><p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-212192603.jpg" alt="" title="请勇敢地向黑夜里走去&lt;br/&gt;&lt;br/&gt;虽然你没有什么成功的机会，虽然你刚上路便可能横死&lt;br/&gt;&lt;br/&gt;但我依然祝福你，并诅咒你。——猫腻"></p><a id="more"></a><pre class="line-numbers language-objectivec"><code class="language-objectivec">NSMutableAttributedString <span class="token operator">*</span>attributedString <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSMutableAttributedString alloc<span class="token punctuation">]</span> initWithData<span class="token punctuation">:</span><span class="token punctuation">[</span>title dataUsingEncoding<span class="token punctuation">:</span>NSUnicodeStringEncoding<span class="token punctuation">]</span>  options<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">{</span> NSDocumentTypeDocumentAttribute<span class="token punctuation">:</span> NSHTMLTextDocumentType <span class="token punctuation">}</span> documentAttributes<span class="token punctuation">:</span>nil error<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样子的话,html字符串就可以转换为 <code>NSMutableAttributedString</code> 对象，可以展示在可以展示 AttributedString的空间上，但是这个东西是有一定时间的耗时的。<br>尤其是在 tableview上会消耗很大的计算时间，使滑动出现问题。那么我们就需要进行一个一步计算，并且为了更好的节省性能，我们最好做一个缓存。接下来就是我的制作方式</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token keyword">@interface</span> <span class="token function">OddityHtmlTitleCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">@property</span><span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span>strong<span class="token punctuation">)</span>  NSCache <span class="token operator">*</span>sharedCache<span class="token punctuation">;</span><span class="token keyword">@end</span><span class="token keyword">@implementation</span> OddityHtmlTitleCache<span class="token comment" spellcheck="true">// 创建一个 单利的 管理器</span><span class="token operator">+</span><span class="token punctuation">(</span>OddityHtmlTitleCache <span class="token operator">*</span><span class="token punctuation">)</span>sharedCache<span class="token punctuation">{</span>    <span class="token keyword">static</span> OddityHtmlTitleCache <span class="token operator">*</span>sharedManager<span class="token punctuation">;</span>    <span class="token keyword">static</span> dispatch_once_t onceToken<span class="token punctuation">;</span>    <span class="token function">dispatch_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>onceToken<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>        sharedManager <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>OddityHtmlTitleCache alloc<span class="token punctuation">]</span>init<span class="token punctuation">]</span><span class="token punctuation">;</span>        sharedManager<span class="token punctuation">.</span>sharedCache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSCache alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sharedManager<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 根据 html字符串获取  NSAttributedString</span><span class="token operator">-</span><span class="token punctuation">(</span>NSAttributedString <span class="token operator">*</span><span class="token punctuation">)</span>htmlTitleByString<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>title<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在cache 提取</span>    id viewController <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>sharedCache objectForKey<span class="token punctuation">:</span>title<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> viewController<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> viewController<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    NSMutableAttributedString <span class="token operator">*</span>attributedString <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSMutableAttributedString alloc<span class="token punctuation">]</span> initWithData<span class="token punctuation">:</span><span class="token punctuation">[</span>title dataUsingEncoding<span class="token punctuation">:</span>NSUnicodeStringEncoding<span class="token punctuation">]</span>  options<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">{</span> NSDocumentTypeDocumentAttribute<span class="token punctuation">:</span> NSHTMLTextDocumentType <span class="token punctuation">}</span> documentAttributes<span class="token punctuation">:</span>nil error<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>attributedString addAttributes<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">{</span>                                      NSFontAttributeName<span class="token punctuation">:</span><span class="token punctuation">[</span>UIFont oddity_font3<span class="token punctuation">]</span><span class="token punctuation">,</span>                                      <span class="token punctuation">}</span> range<span class="token punctuation">:</span><span class="token punctuation">[</span>attributedString<span class="token punctuation">.</span>string fullRange<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>attributedString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>sharedCache setObject<span class="token punctuation">:</span>attributedString forKey<span class="token punctuation">:</span>title<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> attributedString<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">@end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最开始，我是在ios10，测试的，没有问题，但是我的同时反馈给我。他有崩溃。<br>最终我查到了,在<a href="http://stackoverflow.com/questions/28915954/nsattributedstring-initwithdata-and-nshtmltextdocumenttype-crash-if-not-on-main" target="_blank" rel="noopener">stackoverflow</a>，这个转的方法，在ios9.2之前，异步执行该方法都会错误的。<br>且行且珍惜把……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在ios中想要把html字符串转换成 AttributedString ，需要使用以下方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-212192603.jpg&quot; alt=&quot;&quot; title=&quot;请勇敢地向黑夜里走去&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;虽然你没有什么成功的机会，虽然你刚上路便可能横死&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;但我依然祝福你，并诅咒你。——猫腻&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="AttributedString" scheme="http://www.msiter.com/tags/AttributedString/"/>
    
      <category term="iOS8 html2AttributedString error" scheme="http://www.msiter.com/tags/iOS8-html2AttributedString-error/"/>
    
  </entry>
  
  <entry>
    <title>WebKit WkwebView dealloc Crash错误</title>
    <link href="http://www.msiter.com/2017/05/17/WebKit%20WkwebView%20dealloc%20Crash%E9%94%99%E8%AF%AF/"/>
    <id>http://www.msiter.com/2017/05/17/WebKit WkwebView dealloc Crash错误/</id>
    <published>2017-05-17T14:19:00.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-212206847.jpg" alt="" title="生活总是让我们遍体鳞伤，但到后来，那些受伤的地方一定会成为我们最强壮的地方。——海明威"></p><a id="more"></a><p>今天遇到一个奇怪的问题，在我 dismiss UIViewController后，我的UIViewController没有销毁，这导致内存在慢慢的增长，没有销毁。<br>查了一会儿，把问题锁定在了 WKWebView上了，我开始慢慢的注释，调试，最后发现。是我的以下代码的问题。</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token keyword">self</span><span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>WKWebViewConfiguration alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>userContentController addScriptMessageHandler<span class="token punctuation">:</span><span class="token keyword">self</span> name<span class="token punctuation">:</span> OddityWkWebViewConfiguration<span class="token punctuation">]</span><span class="token punctuation">;</span>_wkWebView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>OddityCustomWkWebView alloc<span class="token punctuation">]</span>initWithFrame<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRectZero<span class="token punctuation">)</span> configuration<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>configuration<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在我注释了，<code>addScriptMessageHandler</code>方法之后，dealloc调用了。<br>那么就知道了问题了。在 ViewDidDisapper 方法，<code>removeScriptMessageHandlerForName</code> 就好了</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidDisappear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidDisappear<span class="token punctuation">:</span>animated<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>userContentController removeScriptMessageHandlerForName<span class="token punctuation">:</span> OddityWkWebViewConfiguration<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再后来我发现在ios的测试机上，我推出去之后会直接崩溃。控制台打印出，野指针的问题，最后确认为野指针就是 WkWebView。<br>后来在 <a href="http://stackoverflow.com/questions/35529080/wkwebview-crashes-on-deinit" target="_blank" rel="noopener">stackoverflow</a>找到了这个问题的解决。最后更新为</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidDisappear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidDisappear<span class="token punctuation">:</span>animated<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>wkWebView<span class="token punctuation">.</span>scrollView<span class="token punctuation">.</span>delegate <span class="token operator">=</span> nil<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>userContentController removeScriptMessageHandlerForName<span class="token punctuation">:</span> OddityWkWebViewConfiguration<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，不崩溃了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-212206847.jpg&quot; alt=&quot;&quot; title=&quot;生活总是让我们遍体鳞伤，但到后来，那些受伤的地方一定会成为我们最强壮的地方。——海明威&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="Systematic distinction" scheme="http://www.msiter.com/tags/Systematic-distinction/"/>
    
      <category term="WebKit" scheme="http://www.msiter.com/tags/WebKit/"/>
    
  </entry>
  
  <entry>
    <title>Autolayout 和 size-class 简明教程</title>
    <link href="http://www.msiter.com/2016/11/21/Autolayout%20%E5%92%8C%20size-class%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <id>http://www.msiter.com/2016/11/21/Autolayout 和 size-class 简明教程/</id>
    <published>2016-11-21T03:25:00.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-184089425.jpg" alt="" title="让你难过的事情，有一天，你一定会笑着说出来。"></p><h2 id="教程开始前的废话连篇"><a href="#教程开始前的废话连篇" class="headerlink" title="教程开始前的废话连篇"></a>教程开始前的废话连篇</h2><p>在iphone5出现之后，也就是ios6的时候。约束(autolayout)出现了，其实最开始的时候，ios dever们都还是坚持手写代码，毕竟自己用了好几年了，你说换就换，现在的需求你帮我写啊？所以导致当时使用约束的少之又少，直至后来出现了横屏和竖屏之类适配，而且屏幕更多繁多的时候，手写代码已经越来越不太能担任这个任务的时候，才开始慢慢的进入了这个大潮<br><a id="more"></a><br>而我比较幸运，在iphone5的时候第一次拥有了iphone手机，在我学习ios的时候，iphone6和swift这两个东西出现了。所以我最开始学习的时候就是使用 storyboard和约束一起学习的<br>好了废话不多说了。约束到底是什么东西呢？<br>其实说白了他是一种描述性的布局方式。什么是描述？比如说。“咳咳，这个图片距离这个按钮的右边10像素，距离屏幕上方10像素！图片的大小是80x80”。这就叫做描述，这样我们的前辈们(apple的开发人员们)，就会把我们的描述解析成相对应的布局方式，完成图片位置的放置。<br>其实说到布局，无论手写代码还是xib,sb(storyboard)都可以进行约束的编码的。</p><p>我们教程首先学习 sb,xib这一类的布局，因为这样咱们可以很直观的看到约束对于view的布局影响。当我们足够熟悉布局的时候，再转入手写布局会方便很多<br>这篇教程将以这几个方面进行讲解</p><ol><li>XIB StoryBoard 约束设置</li><li>NSLayoutConstraint 约束设置</li><li>VFL 约束设置</li><li>NSLayoutAnchor 约束设置</li><li>第三方约束设置</li><li>例子总结 － 实例</li><li>总结</li></ol><h2 id="XIB-StoryBoard-约束设置"><a href="#XIB-StoryBoard-约束设置" class="headerlink" title="XIB StoryBoard 约束设置"></a>XIB StoryBoard 约束设置</h2><p>在我们学习之前，请你们自己建立一个项目。打开storyboard的预览界面，咱们在界面的最下方<br><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/BE5B8FF5-250A-44DF-BB08-343FEA76D7FC.jpeg" alt="" title="storyboard的预览界面"></p><p>下方有三个button，分别是 <code>align</code>  <code>pin</code>  <code>resole auto layout issues</code></p><h3 id="align"><a href="#align" class="headerlink" title="align:"></a>align:</h3><p>英文解释的意思为排序，那么我们即可以理解为，排序…点击展开选项，我会挨个解释一下。</p><p><img src="http://image.msiter.com/AutoLayout/A09775AE-9029-4D6B-B158-7B0DF235BDCF.png" alt="" title="align 展开示例"></p><blockquote><p>ps选项一共有4个类别。第一类和第二类是需要选中两个或者多个的view的时候，才可以操作  </p></blockquote><ol><li><code>Leading Edges</code> 选中的views们 <code>左</code> 对齐</li><li><code>Trailing Edges</code>  选中的views们 <code>右</code> 对齐</li><li><code>Top Edges</code>  选中的views们 <code>上</code> 对齐</li><li><code>Bottom Edges</code>  选中的views们 <code>下</code> 对齐</li><li><code>Horizontal Centers</code> 选中的views们 <code>水平方向</code> 中心对齐</li><li><code>Vertical Centers</code> 选中的views们  <code>垂直方向</code> 中心对齐</li><li><code>Baselines</code> 选中的views们基于 <code>基线</code> 对齐</li><li><code>Horizontally in Container</code> 选中的视图 相对于 父视图 进行 <code>水平方向</code> 对齐</li><li><code>Vertical in Container</code> 选中的视图 相对于 父视图 进行 <code>垂直方向</code> 对齐</li><li><code>Update Frames None</code> 再设置了这些约束之后不进行Frame的更改</li><li><code>Update Frames Items of New Constraints</code> 设置了这些约束之后 只更改选中的这些views的Frame</li><li><code>Update Frames All Frames in Container</code> 更改该 vc 里所有View的约束 (慎用!!!!!!)        </li></ol><h3 id="pin"><a href="#pin" class="headerlink" title="pin:"></a>pin:</h3><p>英文解释为 大头针，其实我们就可以为，这个展开项内的所有的现象都是为了将视图订在某一个位置的。那么我们再次展开选项</p><p><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/C0610ECB-64F0-453B-B587-55E5967F5287.png" alt="" title="pin 展开示例"></p><ol><li><code>上方的输入框</code> 这个输入框时表示当前选中的views或者view距离父视图的上方距离为多少，左右下同理，不一一赘述了</li><li>而点击这个倒三角开启的选项中<ol><li><code>User Standard Value</code> 是说使用标准的的值，而且这个值只有在是设置上下方向的时候才有用。默认的值其实就是距离 Bottom Layout Guide，也就是上下基线。下基线就是距离视图最底部。上基线就是距离StatusView下方的位置。而这里的默认值其实是8</li><li><code>User Current Canvas Value</code> 使用当前位置设置。默认为当前设置方向最近的一个VIew，且没有覆盖遮挡的视图</li><li>剩下的选项，会根据当前视图的布置情况有所不同，但是道理相当，这个选项是让你设置你要根据那个视图进行当前位置距离的设置的</li></ol></li><li><code>Width</code> 和 <code>Height</code> 这个不需要我赘述了吧。分别是 宽度和高度 的设置</li><li><code>Constarain to Margins</code>. 这个是否需要外边距 默认为 8 。一般没啥卵用，都会去掉</li><li><code>Equal Widths</code> 和 Equal Heights 这两个选项需要选择两个视图。比如选中View1和View2，那么可以分别设置这个两个视图宽度和高度相等</li><li><code>Aspect Ratio</code> 这个属性是设置选中View的比例。当你点击设置的时候，默认他会设置当前视图的比例。比如你的View高度为40宽度为30。那么你的比例就将设置为3:4. 如果你希望修改这个比例的属性，咱们在讲完这三个东西之后，我会讲解</li><li><code>Align</code> 这个东西你不得不承认这个东西和咱们学习的第一个Align重复的… 在这里就不赘述了</li><li><code>Update Frames</code> 这个查看上面 Align选项的这个属性就好了</li></ol><h3 id="resole-auto-layout-issues"><a href="#resole-auto-layout-issues" class="headerlink" title="resole auto layout issues"></a>resole auto layout issues</h3><p>他的这个解释已经很好理解了，自动布局问题的解决。就是如果你在布局的<br>时候出现了一些问题。比如，咱们再设置约束之后，出现黄色或者红色的的颜色的时候。就需要使用以下方式修改。红色说明咱们设置的约束有缺失或者有冲突的问题，黄色则说明，约束正确，但是当前View的Frame和约束描述的Frame不一致</p><p><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/FF75AD66-382E-4735-A5EA-8F462C83EAF7.png" alt="" title="resole auto layout issues 展开示例"></p><p>看到以上视图咱们可以看出它分为两个而且这两种除了名字不一样，选项是一摸一样的额。Selected Views 这个说的就是你要处理的约束问题是当前你选中的View，而All Views in View Controller，则是说明要解决的约束问题是这个ViewController所有的VIew的(这个可得慎重的)。</p><ol><li><code>Update Frames</code> 修改Frame，当你的约束设置正确但是Frame不对的时候使用者选项可以讲View的Frame展示成为约束所描述的样子</li><li><code>Update Constaints</code> 而这个选项，说实话我没用过。他的意思咱们也可以知道他是通过Frame 去修改 约束……</li><li><code>Add Missing Constraints</code> 添加缺失的约束，这个选项我也没使用过，因为这个方法添加的缺失的约束不一定就是正确的约束，在实际运行中肯定会出现问题所以尽量自己把缺失的约束自己添加了。</li><li><code>Reset to Suggested Constaints</code> 重新设置建议的约束？没使用过，不知道什么意思</li><li><code>Clear Constraints</code> 清除约束，会删除选中的视图的所有的约束。在All Views in View Controller 你要是做这个选项的时候可得慎重，使用了就说明你要删除当前VC所有的约束。当然你可以 <code>ctrl-z</code></li></ol><h3 id="后面的话"><a href="#后面的话" class="headerlink" title="后面的话"></a>后面的话</h3><p>在说了这些之后，其实咱们应该已经可以进行约束的设置了，但是还有很多问题，其中我现在说一下快速设置的问题。当你在这个层次view选择器中（图1）。</p><p><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/5FF17D89-6D56-4A5E-B24F-42245511D5EC.png" alt="" title="图一"><br><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/0666C110-0858-486F-8258-9E10FE48FC7E.png" alt="" title="图二"><br><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/3185DBB0-5168-43A4-8515-356F1AA8D1FE.png" alt="" title="图三"></p><ol><li>快速设置的问题。我们可以在View上按住Ctrl 键之后左键拖拽到view本身或者其他View来快速的设置一些属性，具体的属性，咱们自己看吧。他只是一种快捷方式，在属性设置上没有任何区别的，这里就不一一赘述了</li><li>快速解决约束问题的快捷键。当我们的View的约束正确的而fram没有显示正确的位置的时候我们可以使用 resole auto layout issues 进行修改，但是每次都要打开这选项实在是太麻烦了。所以我们可以选择一个快捷键。就是 osx ： <code>comment+alt+=</code>  而window 则为 <code>window+alt+=</code>  快速修改约束</li><li>设置UIScrollView的时候，因为牵扯到要设置ScrollView ContainView 的高度宽度的问题，所以再设置 ScrollView 子View 的时候一定要明确一个道理！  就是比如保证 子视图的约束结合起来之后可以让 containView知道自己的高度和宽度，如果缺失，将导致约束失败。</li><li>修改约束的问题，咱们在修改约束的时候也是在view的选择器中。选中你要修改的VIew之后在最左侧的工具箱中（图2）。可以看到我们黄框标注出的约束。点击Edit就可以修改咱们约束的属性了<ol><li>Constant  这个输入框就是约束的值，而大于等于，小于等于以及等于需要咱们根据实际情况进行自己分辨设置</li><li>Priority 优先级别，这个分别为 1000(最高)， 750(中),250(低)。三个选项，这个我没有使用过，不过估计是想两个约束发生实际运行中的冲突的时候 进行优先级显示的方法吧</li><li>Multiplier 这个就是设置比例的地方，就是咱们之前说的。而这个设置是非常好玩的一个设置，当然他也有使用的局限，在设置视图的宽度和高度的时候这个是用不了的，是设置比如 距离四周的位置？居中，或者两个视图的宽度高度相等的时候,或者比例设置的时候，才会可以设置。这个我还没有很多疑问。所以在我测试完成后，会进行修改</li></ol></li></ol><h2 id="NSLayoutConstraint-约束设置"><a href="#NSLayoutConstraint-约束设置" class="headerlink" title="NSLayoutConstraint 约束设置"></a>NSLayoutConstraint 约束设置</h2><p>使用NSLayoutConstraint是Apple在出约束的时候出现的，也就是官方推荐用户使用这个东西，或者sb和xib。至少当时是这样的额。但是…这个东西的费事儿成都超出你的想象</p><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token builtin">NSLayoutAttribute</span> <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token keyword">left</span>    <span class="token keyword">case</span> <span class="token keyword">right</span>    <span class="token keyword">case</span> top    <span class="token keyword">case</span> bottom    <span class="token keyword">case</span> leading    <span class="token keyword">case</span> trailing    <span class="token keyword">case</span> width    <span class="token keyword">case</span> height    <span class="token keyword">case</span> centerX    <span class="token keyword">case</span> centerY    <span class="token keyword">case</span> lastBaseline    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> firstBaseline    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> leftMargin    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> rightMargin    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> topMargin    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> bottomMargin    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> leadingMargin    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> trailingMargin    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> centerXWithinMargins    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> centerYWithinMargins    <span class="token keyword">case</span> notAnAttribute<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在网上看到一张图可以很好的说明问题。</p><p><img src="http://image.msiter.com/AutoLayout/NSLayoutAttribute.png" alt="" title="NSLayoutAttribute 示例"></p><p>以上的属性很多大家肯定都自己可以看懂，我也就不说了。我这里就说几个比较让人觉的不解的地方。</p><ol><li>有 <code>Margins</code> 和 没有 <code>Margins</code> 的区别在于，咱们在SB 和 xib 中设置的 <code>Constarain to Margins</code> 是一个效果</li><li><code>Leading</code>  在习惯从右至左看的地区，相当于<code>NSLayoutAttributeRight</code>; <br \=""> <code>Trailing</code>: 在习惯由左向右看的地区，相当于<code>NSLayoutAttributeRight</code>；在习惯从右至左看的地区，相当于<code>NSLayoutAttributeLeft</code></li><li><code>lastBaseline</code> 文字的下基线  <code>firstBaseline</code> 文字的上基线</li></ol><p>首先他的方法如下：</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">///  获得一个约束</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">///  - parameter view1: 第一个对象，通常就是咱们要设置的用户的View</span><span class="token comment" spellcheck="true">///  - parameter attr1:    你要是设置他的那个属性 查阅上方 NSLayoutAttribute 解释</span><span class="token comment" spellcheck="true">///  - parameter relation:   一个Enum对象， 大于等于 小于等于 等于，自己看看吧， 不赘述了</span><span class="token comment" spellcheck="true">///  - parameter view2:    第二个对象 一般是你要设置的View的SuperView。如果你只设置View的宽度或者高度这些只需要一个VIew就可以做的这个参数就为nil</span><span class="token comment" spellcheck="true">///  - parameter attr2:    第二个对象的 属性。 如果第二个对象为 nil。则该对象为  notAnAttribute</span><span class="token comment" spellcheck="true">///  - parameter multiplier:    倍数。 这里不赘述了，查看 SB xib 教程就好了</span><span class="token comment" spellcheck="true">///  - parameter constant:    约束的值</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">///  - returns: NSLayoutConstraint</span><span class="token keyword">public</span> <span class="token keyword">convenience</span> <span class="token keyword">init</span><span class="token punctuation">(</span>item view1<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">,</span> attribute attr1<span class="token punctuation">:</span> <span class="token builtin">NSLayoutAttribute</span><span class="token punctuation">,</span> relatedBy relation<span class="token punctuation">:</span> <span class="token builtin">NSLayoutRelation</span><span class="token punctuation">,</span> toItem view2<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token operator">?</span><span class="token punctuation">,</span> attribute attr2<span class="token punctuation">:</span> <span class="token builtin">NSLayoutAttribute</span><span class="token punctuation">,</span> multiplier<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">,</span> constant c<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者这样说可能更好理解一点<br><code>view1.attr1 [= , &gt;= , &lt;=] view2.attr2 * multiplier + constant</code></p><p>在获取约束完成之后<br>使用每个View 提供的方法</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">UIView</span> <span class="token punctuation">{</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">6.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> constraints<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">NSLayoutConstraint</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">6.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">func</span> <span class="token function">addConstraint</span><span class="token punctuation">(</span><span class="token number">_</span> constraint<span class="token punctuation">:</span> <span class="token builtin">NSLayoutConstraint</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// This method will be deprecated in a future release and should be avoided.  Instead, set NSLayoutConstraint's active property to YES.</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">6.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">func</span> <span class="token function">addConstraints</span><span class="token punctuation">(</span><span class="token number">_</span> constraints<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">NSLayoutConstraint</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// This method will be deprecated in a future release and should be avoided.  Instead use +[NSLayoutConstraint activateConstraints:].</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">6.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">func</span> <span class="token function">removeConstraint</span><span class="token punctuation">(</span><span class="token number">_</span> constraint<span class="token punctuation">:</span> <span class="token builtin">NSLayoutConstraint</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// This method will be deprecated in a future release and should be avoided.  Instead set NSLayoutConstraint's active property to NO.</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">6.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">func</span> <span class="token function">removeConstraints</span><span class="token punctuation">(</span><span class="token number">_</span> constraints<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">NSLayoutConstraint</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// This method will be deprecated in a future release and should be avoided.  Instead use +[NSLayoutConstraint deactivateConstraints:].</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些大家根据名字就可以看懂的我就不解释了。还需要注意的一点就是，一定要设置View的 <code>translatesAutoresizingMaskIntoConstraints</code> 属性为false。否则会出现问题。人家说的也很明白。我要不要自己给你调整位置呢？如果你想自己调整约束来调整位置，就把我设置为false吧。默认为true</p><h2 id="VFL-约束设置"><a href="#VFL-约束设置" class="headerlink" title="VFL 约束设置"></a>VFL 约束设置</h2><p>终于还是到了这里了，之前学习这个的时候真是千难万难，这个东西真心的不怎么友好……<br>废话不多说了 VFL（Visual Format Language）被称为 “可视化格式语言”，是苹果公司为了简化autolayout的编码而推出的抽象语言。</p><table class = "table table-bordered"><thead><tr><th>功能</th><th style="text-align:center">写法</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td>水平方向</td><td style="text-align:center">H: 或 V:</td><td style="text-align:left">H 说明之后的句子都是在水平方向设置约束的 V 则是垂直方向。默认方向为 H 水平方向</td></tr><tr><td>Views</td><td style="text-align:center">[view]</td><td style="text-align:left">要设置的view们</td></tr><tr><td>SuperView</td><td style="text-align:center">&#124;</td><td style="text-align:left">view们所在的父视图</td></tr><tr><td>关系</td><td style="text-align:center">&gt;=,==,&lt;=</td><td style="text-align:left">NSLayoutRelation</td></tr><tr><td>空间，间隙</td><td style="text-align:center">-</td><td style="text-align:left">-30- 说明之间的空隙为30</td></tr><tr><td>优先级</td><td style="text-align:center">@</td><td style="text-align:left">为250 750 1000 三个级别，之前咱们说过了</td></tr><tr><td>设置宽度高度</td><td style="text-align:center">()</td><td style="text-align:left">[view(30)] 配合方向 水平方向就是为宽度 垂直则为高度</td></tr></tbody></table><p>下面咱们来举几个例子：</p><table><thead><tr><th>代码</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>&#124;[view]&#124;</td><td style="text-align:right">和父视图的左右对齐</td></tr><tr><td>&#124;-(&gt;=100)-[view]</td><td style="text-align:right">距父视图的左边距离大于等于100</td></tr><tr><td>[view]</td><td style="text-align:right">宽度大于等于100</td></tr><tr><td>V:&#124;-(&gt;=100)-[view(&gt;=100)]</td><td style="text-align:right">距父视图的上边距离大于等于100并且高度度大于等于100</td></tr></tbody></table><h3 id="约束类型"><a href="#约束类型" class="headerlink" title="约束类型"></a>约束类型</h3><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">:</span> <span class="token builtin">OptionSet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">init</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token builtin">UInt</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignAllLeft<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignAllRight<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignAllTop<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignAllBottom<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignAllLeading<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignAllTrailing<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignAllCenterX<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignAllCenterY<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignAllLastBaseline<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignAllFirstBaseline<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> alignmentMask<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* choose only one of these three     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> directionLeadingToTrailing<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// default</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> directionLeftToRight<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> directionRightToLeft<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> directionMask<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不讲解了，我不是用这个VFL所以不会就不解释了。默认使用 ，init(0). 就好了。</p><h3 id="方法解释"><a href="#方法解释" class="headerlink" title="方法解释"></a>方法解释</h3><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">///  获得一组约束</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">///  - parameter format: vfl 格式化string</span><span class="token comment" spellcheck="true">///  - parameter opts:    NSLayoutFormatOptions Opt</span><span class="token comment" spellcheck="true">///  - parameter metrics:   数据的数据 比如 [view(height)] 那么此时 metrics 就为 ["height":100]. 不需要则为 nil</span><span class="token comment" spellcheck="true">///  - parameter views:    views ["view1":self.backView]</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">///  - returns: NSLayoutConstraints</span>open <span class="token keyword">class</span> <span class="token class-name">func</span> <span class="token function">constraints</span><span class="token punctuation">(</span>withVisualFormat format<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> options opts<span class="token punctuation">:</span> <span class="token builtin">NSLayoutFormatOptions</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> metrics<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">String</span> <span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">,</span> views<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">String</span> <span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token builtin">NSLayoutConstraint</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有声明方向默认为水平H:（原文写的V:）</p><p>妈的，真心不能使用vfl，简直反人类。而且很多问题。比如等于父视图的宽高，剧中问题……   </p><p>等到这些问题解决了，我在用吧，现在还是尽量不使用…… 而且为了使用vfl，还得是用其他方式约束去约束他不能约束，或者我不会约束的地方，真心了累。而且他的宽高问题在横屏的时候也是一个坑。</p><h2 id="NSLayoutAnchor-约束设置"><a href="#NSLayoutAnchor-约束设置" class="headerlink" title="NSLayoutAnchor 约束设置"></a>NSLayoutAnchor 约束设置</h2><p>在ios9 之后，也许是受到了第三方约束框架的鼓舞，咱们的苹果公司更新了对于 autolayout的布局api。 <code>NSLayoutAnchor</code> 。每一个UIView都会有自己的这些属性</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">UIView</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* Constraint creation conveniences. See NSLayoutAnchor.h for details.     */</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> leadingAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutXAxisAnchor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> trailingAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutXAxisAnchor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> leftAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutXAxisAnchor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> rightAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutXAxisAnchor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> topAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutYAxisAnchor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> bottomAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutYAxisAnchor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> widthAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutDimension</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> heightAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutDimension</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> centerXAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutXAxisAnchor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> centerYAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutYAxisAnchor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> firstBaselineAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutYAxisAnchor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    open <span class="token keyword">var</span> lastBaselineAnchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutYAxisAnchor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家看看这些单词就应该知道什么意思了吧。</p><p>咱们可以看到这里大概有三个类型。 <code>NSLayoutXAxisAnchor</code> , <code>NSLayoutYAxisAnchor</code> , <code>NSLayoutDimension</code></p><p>分别左右边距上下边距，以及最后的 宽度和高度</p><p>而这些类型都实现 <code>NSLayoutAnchor</code>,他们有共同的方法</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">/* These methods return an inactive constraint of the form thisAnchor = otherAnchor. */</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>equalTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutAnchor</span><span class="token operator">&lt;</span><span class="token builtin">AnchorType</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>greaterThanOrEqualTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutAnchor</span><span class="token operator">&lt;</span><span class="token builtin">AnchorType</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>lessThanOrEqualTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutAnchor</span><span class="token operator">&lt;</span><span class="token builtin">AnchorType</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span><span class="token comment" spellcheck="true">/* These methods return an inactive constraint of the form thisAnchor = otherAnchor + constant. */</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>equalTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutAnchor</span><span class="token operator">&lt;</span><span class="token builtin">AnchorType</span><span class="token operator">></span><span class="token punctuation">,</span> constant c<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>greaterThanOrEqualTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutAnchor</span><span class="token operator">&lt;</span><span class="token builtin">AnchorType</span><span class="token operator">></span><span class="token punctuation">,</span> constant c<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>lessThanOrEqualTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutAnchor</span><span class="token operator">&lt;</span><span class="token builtin">AnchorType</span><span class="token operator">></span><span class="token punctuation">,</span> constant c<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 针对于高度会有比例这一个约束，所以在 <code>NSLayoutDimension</code>有自己的方法</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">/* These methods return an inactive constraint of the form        thisVariable = constant.*/</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>equalToConstant c<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>greaterThanOrEqualToConstant c<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>lessThanOrEqualToConstant c<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span><span class="token comment" spellcheck="true">/* These methods return an inactive constraint of the form        thisAnchor = otherAnchor * multiplier.*/</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>equalTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutDimension</span><span class="token punctuation">,</span> multiplier m<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>greaterThanOrEqualTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutDimension</span><span class="token punctuation">,</span> multiplier m<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>lessThanOrEqualTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutDimension</span><span class="token punctuation">,</span> multiplier m<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span><span class="token comment" spellcheck="true">/* These methods return an inactive constraint of the form        thisAnchor = otherAnchor * multiplier + constant.*/</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>equalTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutDimension</span><span class="token punctuation">,</span> multiplier m<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">,</span> constant c<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>greaterThanOrEqualTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutDimension</span><span class="token punctuation">,</span> multiplier m<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">,</span> constant c<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span>open <span class="token keyword">func</span> <span class="token function">constraint</span><span class="token punctuation">(</span>lessThanOrEqualTo anchor<span class="token punctuation">:</span> <span class="token builtin">NSLayoutDimension</span><span class="token punctuation">,</span> multiplier m<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">,</span> constant c<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">NSLayoutConstraint</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家自己看看方法就知道了，如果不知道就去文章下方例子，下载查看。</p><h2 id="第三方约束设置"><a href="#第三方约束设置" class="headerlink" title="第三方约束设置"></a>第三方约束设置</h2><ul><li>Masonry (github地址)[<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="noopener">https://github.com/SnapKit/Masonry</a>]</li><li>SnapKit (github地址)[<a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="noopener">https://github.com/SnapKit/SnapKit</a>]</li><li>Cartography (github地址)[<a href="https://github.com/robb/Cartography" target="_blank" rel="noopener">https://github.com/robb/Cartography</a>]</li></ul><p>具体的用法查看他们的教程吧，我就不献丑了。</p><h2 id="例子总结-－-实例"><a href="#例子总结-－-实例" class="headerlink" title="例子总结 － 实例"></a>例子总结 － 实例</h2><p> 那么我们来做一个个人主页的布局吧，因为这里包含的知识点比较多。而且比较好实现……</p><h3 id="XIB-StoryBoard-方式"><a href="#XIB-StoryBoard-方式" class="headerlink" title="XIB StoryBoard 方式"></a>XIB StoryBoard 方式</h3><p>那么首先我们做一个个人主页的背景视图，让他距离上左右方为0。而高度则为整个VC的view的1/3，我录制为了动态图了。<br><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/backview.gif" alt="" title="个人中心背景视图设置"><br>紧接着我们在个人中心的背景视图设置头像以及名字的布局约束<br><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/headrPhotosNamelabel.gif" alt="" title="用户头像，用户姓名约束"><br>设置一个tag分栏视图的约束<br><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/addtag.gif" alt="" title="分栏View约束设置 "><br>设置UISCrollView的约束,以及运行效果<br><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/scrollview.gif" alt="" title="UISCrollView 约束设置"><br>完成滑动Progress修改约束实现 切换ViewControoller的假象<br><img src="http://7xt8nx.com1.z0.glb.clouddn.com/AutoLayout/progress.gif" alt="" title="UISCrollView 修改约束"><br>这样我们就完成了 xib的 布局</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了第三方的约束框架，我都写了一份代码，实现同一个效果。大家有需要的可以查看github上的项目。</p><p>(Github 地址)[<a href="https://github.com/AimobierExample/AutoLayout" target="_blank" rel="noopener">https://github.com/AimobierExample/AutoLayout</a>]</p><p>这是案例的github地址，我把这个例子分为了4个分支。可以按个查看实现的约束。</p><p>写到最后才发觉其实并没有将到 size－class。有机会补上吧～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-184089425.jpg&quot; alt=&quot;&quot; title=&quot;让你难过的事情，有一天，你一定会笑着说出来。&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;教程开始前的废话连篇&quot;&gt;&lt;a href=&quot;#教程开始前的废话连篇&quot; class=&quot;headerlink&quot; title=&quot;教程开始前的废话连篇&quot;&gt;&lt;/a&gt;教程开始前的废话连篇&lt;/h2&gt;&lt;p&gt;在iphone5出现之后，也就是ios6的时候。约束(autolayout)出现了，其实最开始的时候，ios dever们都还是坚持手写代码，毕竟自己用了好几年了，你说换就换，现在的需求你帮我写啊？所以导致当时使用约束的少之又少，直至后来出现了横屏和竖屏之类适配，而且屏幕更多繁多的时候，手写代码已经越来越不太能担任这个任务的时候，才开始慢慢的进入了这个大潮&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="ios" scheme="http://www.msiter.com/tags/ios/"/>
    
      <category term="约束教程" scheme="http://www.msiter.com/tags/%E7%BA%A6%E6%9D%9F%E6%95%99%E7%A8%8B/"/>
    
      <category term="swift" scheme="http://www.msiter.com/tags/swift/"/>
    
      <category term="autolayout" scheme="http://www.msiter.com/tags/autolayout/"/>
    
  </entry>
  
  <entry>
    <title>制作一个自己的 Cydia 源</title>
    <link href="http://www.msiter.com/2016/11/12/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%20Cydia%20%E6%BA%90/"/>
    <id>http://www.msiter.com/2016/11/12/制作一个自己的 Cydia 源/</id>
    <published>2016-11-12T02:05:43.000Z</published>
    <updated>2017-11-28T11:07:04.831Z</updated>
    
    <content type="html"><![CDATA[<p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-155012621.jpg" alt="" title="夜里不睡的人，白天多多少少总有什么逃避掩饰的吧。白昼解不开的结黑夜慢慢耗"></p><p>大家肯定都知道 Cydia 吧，</p><blockquote><p>iPhone、iPod touch、iPad等设备上的一种破解软件，类似苹果在线软件商店iTunes Store 的软件平台的客户端，在越狱的过程中被装入到系统中的，其中多数为iPhone、iPod Touch、ipad的第三方软件和补丁，主要都是弥补系统不足用。是由Jay Freeman（Saurik）领导，Okori Group以及UCSB大学合作开发。</p></blockquote><p>之前用了很多好用的源，但是很好奇的是，他们是怎么制作的呢？为什么越狱之后就可以这么厉害呢？<br>那么怎么制作这么一个东西</p><a id="more"></a><h2 id="制作自己的-Cydia源"><a href="#制作自己的-Cydia源" class="headerlink" title="制作自己的 Cydia源"></a>制作自己的 Cydia源</h2><p>Cydia 说白了启示就是一个云盘，你们需要的呢，只是需要几个文件，来告诉过来访问这个云盘的Cydia程序，我这个源叫啥？谁制作的这个源？这个源里都有什么软件？这些源的放置位置都是啥？<br>那么如何制作自己的云盘呢？ 几种办法</p><ol><li>第一种就是自己做一个服务器，本地跑起来。</li><li>github</li><li>任何一个直接访问的文件存储地方 比如 七牛云。</li></ol><p>Cydia 源的文件结构</p><pre><code>+- /   +- Release   +- Packages   +- CydiaIcon.png   +- debs      +- *.deb</code></pre><h3 id="文件讲解"><a href="#文件讲解" class="headerlink" title="文件讲解"></a>文件讲解</h3><p><code>/</code> 服务器根目录<br><code>/Release</code>  文件记录软件源本身的相关信息 ，例如作者 之类的<br><code>/Packages</code> 记录具体软件包的存放位置和安装信息等数据<br><code>/CydiaIcon.png</code> ICON 显示的ICON图片<br><code>/debs</code> 存放所有deb包的目录<br><code>/debs/*.deb</code> deb包……</p><h4 id="Release-文件讲解"><a href="#Release-文件讲解" class="headerlink" title="Release 文件讲解"></a>Release 文件讲解</h4><p>必须<br>Origin: 软件源名称，可以使用中文（Cydia的软件源列表中显示的标题）<br>Label:  同上，也可以使用中文<br>Suite: 软件源的类型，比如正式源，测试源等，可以分别用stable, beta, unstable等来表示，一般填stable就可以了<br>Version: 版本号，这个其实不重要，随便填，一般都是写1.0<br>Codename: 代码代号，比如BigBoss的就写BigBoss，威锋的就写WeiPhone，也没什么限制，只能用英文<br>Architectures: 结构。iPhone平台统一写iphoneos-arm<br>Components: main<br>Description: 软件介绍，可以使用中文和html代码，具体能使用哪些代码在下面会介绍。</p><p>可选<br>Support: 支持，没什么作用，除非特别需要，否则可以不要这个。<br>MD5Sum: 不是必须的，但如果Packages文件位置不与Release文件在同一目录下，则必须有此项。另外，如果需要签名Release文件，也必须有这个。关于MD5Sum的格式，在下文也会介绍。</p><p>Description格式</p><ul><li>显示在Cydia中每个软件页面最下方。</li><li>不能直接换行，如果要实现显示换行显示，可以使用<br>代码。</li><li>要加粗显示，可以使用<strong></strong>代码</li><li>可以使用html代码设置字体颜色。</li><li>不能使用超链接代码。</li></ul><p>代码：</p><pre><code>Description: WeiPhone-威锋网为您提供iPhone所需软件/补丁。&lt;br&gt;联系我们: &lt;strong&gt;weip.com@ gmail.com&lt;/strong&gt;;</code></pre><h4 id="生成Packages文件"><a href="#生成Packages文件" class="headerlink" title="生成Packages文件"></a>生成Packages文件</h4><ol><li>将 deb 文件放在一个文件夹下，比如说debs下</li><li>命令行里进入到debs目录的上级目录</li><li>Packages存放于当前目录</li><li>执行命令 <code>dpkg-scanpackages debs &gt; Packages</code></li><li>执行命令 <code>bzip2 -zfk Packages</code> 生成 <code>Packages.bz2</code></li><li>执行命令 <code>gzip -fk Packages</code> 生成 <code>Packages.gz</code></li></ol><blockquote><p>ps 4.5.6 可以使用 <code>dpkg-scanpackages debs &gt; Packages &amp;&amp; bzip2 -zfk Packages &amp;&amp; gzip -fk Packages</code></p></blockquote><p>这样会自动将debs文件夹下的所有 deb文件信息 打印至 Packages 文件里</p><h2 id="旧-制作-自己deb-文件"><a href="#旧-制作-自己deb-文件" class="headerlink" title="(旧) 制作 自己deb 文件"></a>(旧) 制作 自己deb 文件</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>先把文件夹结构弄好</li><li>在 <code>Applications</code> 文件夹下面放入自己的 .app 文件</li><li>在 <code>DEBIAN</code> 文件夹下面放入 <code>control</code>描述文件，以及根据自己的需求放入脚本文件</li><li>使用 <code>chmod -R 0755 Directory</code> 设置权限</li><li>使用 <code>dpkg-deb -b Directory a.deb</code> 命令打包</li><li>使用 <code>dpkg-name a.deb</code> 规范命名</li></ol><h4 id="各个文件讲解"><a href="#各个文件讲解" class="headerlink" title="各个文件讲解"></a>各个文件讲解</h4><p>先生成如下的文件目录结构：</p><pre><code>+- Directory   +- Applications   |   +- Example.app   |   |    +- Info.plist   |   |    +- Example   |   |    +- icon.png   +- DEBIAN       +- control       +- preinst/postinst/prerm/postrm/extrainst_</code></pre><p><code>/Directory</code> : 任意的一个文件夹放置主要的文件<br><code>/Directory/Applications</code> : 放置<code>.app</code>文件夹<br><code>/Directory/Applications/Example.app</code> : <code>.app</code>文件夹</p><p><code>/DEBIAN</code> : 放置描述的文件<br><code>/DEBIAN/control</code> : 记录了软件包标识，软件名，介绍，作者，冲突软件等信息，用来标识一个软件包</p><h4 id="DEBIAN-control-文件描述"><a href="#DEBIAN-control-文件描述" class="headerlink" title="DEBIAN/control 文件描述"></a>DEBIAN/control 文件描述</h4><p>以下为必须项</p><p>Package : 软件包标识符，类似于<em>*</em>，一个软件包必须要有一个唯一的标识符。通常是用com.xxx.abc这样的形式来命名。<br>Architecture: 架构，用于标识运行的系统，iPhone上为iphoneos-arm<br>Version: 版本号，不能用下划线和逗号和空格。格式有（以逗号分隔） 1.0，1.0f，0-1，1:1.0，其中1:1.0这种格式比较特殊，在Cydia中，1:1.0仍然会显示为1.0，但版本号实际是高于1.0的。</p><p>以下为可选项<br>Name: 软件包在Cydia中的显示名称，中英文不限，也可以用空格，但不宜过长（长了显示不完全）。<br>Author: 软件作者。<br>Maintainer: 维护者，一般是软件源的拥有者。<br>Sponsor: 负责人，可以是个人也可以是网站。</p><blockquote><p>Author，Maintainer，Sponsor 的格式相同，均为 名称+空格+&lt;邮件地址或网址&gt;，经测试，如果名称为中文的话，即使写了邮件地址和网址，在Cydia中点击也不会跳转。 示例： WEIP.Tech <a href="&#109;&#97;&#105;&#108;&#x74;&#111;&#58;&#119;&#101;&#105;&#112;&#46;&#x63;&#x6f;&#109;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#44;&#x63;&#x6f;&#x6d;">&#119;&#101;&#105;&#112;&#46;&#x63;&#x6f;&#109;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#44;&#x63;&#x6f;&#x6d;</a> 或 WeiPhone.com <a href="http://www.weiphone.com" target="_blank" rel="noopener">http://www.weiphone.com</a> 如果没有邮件地址或网址，则不需要 &lt;&gt; 及&lt;&gt;中的内容。中文名或未提供邮件/网址，无 &gt; 符号</p></blockquote><p>Icon: 指定软件包的图标显示。当无Icon设定时，Cydia会显示该软件包所在的分类的图标。 格式：</p><ul><li>在线地址，如 <a href="http://www.abc.com/abc.png" target="_blank" rel="noopener">http://www.abc.com/abc.png</a></li><li>本地地址：file://+路径，如file:///Applications/Cydia.app/Sources/app.weiphone.com.png<br><em>注：在软件页面（非列表页面），自定义的图标是不会显示的，显示的是分类图标。</em></li></ul><p>Section: 软件分类，中英文无限制，排列顺序是 英文-&gt;中文。<br>Installed-Size: 解包后的文件大小，可以有小数位，以kb为单位，不需要注明kb，这个不需要很精确，而且小数位在Cydia里显示不出来（不是四舍五入，全部舍了）。至于文件大小是否包含DEBIAN目录中的内容就随意了。<br>Priority: 优先级，可填 Required，Important，Standard，Optional，Extra，依次为 必须，重要，一般，可选，次要。虽然没有什么实际作用，但优先级为Required和Important的软件包在卸载时会有警告，这样可以避免删除一些系统必须的软件。但Required和Important不要滥用，一般用Standard，Optional或Extra即可。优先级在Cydia中是不会显示的<br>Essential: 是否必须软件包，可填 yes 和 no， 填yes则为必须软件包，卸载时Cydia会有警告。卸载Essential标记为yes的软件包可能会导致系统问题。当然此功能需慎用，不要因为不希望用户删除自己的软件而加入Essential: yes。如果没有Essential这项的话默认就是非必须的，相当于Essential: no。<br>Depends: Depends 字段应该包含您的软件包正常工作绝对必需的任何软件包的名称。<br>Pre-Depends: “Pre-Depends”是为特例而保留的。当某个软件包被作为”Pre-Depends”列出时，它强制系统在试图安装您的软件包之前完全安装所指定的软件包。<br>Conflicts: 冲突软件包。比如软件包A和B有冲突，不能同时安装。比如说A和B冲突，当系统已经安装了A的时候尝试安装B，则不能继续。<br>Provides: 提供的软件包，比如说软件包A包含B的全部功能，那么则是A provides B，因此可以在安装了A的前提下不安装B。但此功能在非Cydia的软件管理工具中可能会无法识别（实际是这些软件不合deb标准）<br>Replaces: 替换软件包，安装A会替换B。</p><blockquote><ul><li>以上5项的格式相同，直接填软件包的Package标识即可，如果需要加入版本号，则为 软件表标识+空格+(判断符号 版本号).比如 Depends: apt-key, firmware (&gt;=3.0)， 这表示依赖于apt-key，不限版本，firmware，且版本大于或等于3.0。</li><li>判断符号：远远低于（&lt;&lt;）、低于(&lt;)、低于或等于（&lt;=）、仅等于（=）、等于或高于（&gt;=）、大于（&gt;）以及远远高于（&gt;&gt;）。</li><li>表示多个软件包，以英文逗号分隔。</li><li>表示“或”关系，用 | 分隔。比如软件包C依赖于A或B，可写Depends: A | B。 但“或”关系要慎用。原因是，当不存在“或”关系的时候，假设B依赖于A，且系统并未安装A，那么在Cydia中安装B的时候会自动下载安装A。而假如说C依赖于A或B，且A与B都未安装，那么在安装C的时候就会失败，因为系统无法判断是应该下载A还是B。除非系统已经安装了A或B，否则C不能安装。</li><li>一个特殊的依赖：firmware。这个Package记录了固件版本，在对固件版本有要求的软件包上特别重要。</li><li>假设B依赖于A，那么在卸载A的时候也会一起卸载B</li></ul></blockquote><p>Description: 软件描述，不能在control里直接换行，如果需要实现换行显示，可以使用<br>代码。当指定了Depiction时，在软件查看页面不会显示Description。<br>Depiction: 功能类似于软件描述，链接到一个网页，以网页的内容代替软件描述。只在软件查看页面显示，在软件包列表页面不显示。 可以使用本地网页，格式同Icon。 注意：此功能可能会消耗大量网络流量。<br>Homepage: 链接到页面，Cydia中显示为More Information。 页面不会主动加载。<br>Tag: 可选项有 commercial, console, daemon, extension, library, uikit, x，对应图标文件在 /Applications/Cydia.app/Purposes 目录下。也可以自行添加 purpose 分类，并加入同名图标即可。 role:: 软件包使用者归类。developer开发者，hacker骇客，enduser普通用户，该标签用于Cydia中软件包显示过滤。 cydia::commercial Cydia Store软件。</p><p>例子如下:</p><pre class="line-numbers language-txt"><code class="language-txt">Package: com.weiphone.sourceName: WeiPhone威锋中文源Version: 1.0Essential: noIcon: file:///Applications/Cydia.app/Sources/app.weiphone.com.pngInstalled-Size: 133.7Replaces: con.weiphone.logoConflicts: con.weiphone.logoProvides: con.weiphone.logoDepends: cydiaPriority: StandardMaintainer: WEIP.Tech <weip.com@gmail.com>Author: WEIP.Tech <weip.com@gmail.com>Section: RepositoriesArchitecture: iphoneos-armDescription: WeiPhone Chinese Repository<br><br>威锋中文源HomePage: http://www.weiphone.com/Sponsor: WeiPhone.com <http://www.weiphone.com>Tag: purpose::repository, role::enduser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DEBIAN-preinst-postinst-prerm-postrm-extrainst-文件描述"><a href="#DEBIAN-preinst-postinst-prerm-postrm-extrainst-文件描述" class="headerlink" title="DEBIAN/preinst/postinst/prerm/postrm/extrainst_  文件描述"></a>DEBIAN/preinst/postinst/prerm/postrm/extrainst_  文件描述</h4><p>很多时候deb安装并不是把文件复制到iPhone里就可以了，还需要执行一些命令，比如设置权限，备份文件，加载启动进程等等，那么这时候就需要一些脚本来实现这些操作。 标准的deb脚本有4个<code>preinst</code>,<code>postinst</code>,<code>prerm</code>和 <code>postrm</code><br>pre是表示XX之前的前缀，post是表示XX之后的前缀，inst是install（安装）的缩写，rm是remove（移除）的缩写，所以这4个脚本的功能很明显：</p><ul><li>preinst: 在复制文件前执行的脚本</li><li>postinst: 在复制文件之后执行的脚本</li><li>prerm: 在卸载前执行的脚本</li><li>postrm: 在卸载之后执行的脚本</li></ul><p>在Cydia中还存在一个独立的脚本,<code>extrainst_</code>,从字面上来讲就是额外的安装脚本。<br>这个脚本是Cydia的作者Saurik为解决某些脚本只需要在安装时执行，在升级时不执行而专门引入的一个脚本，功能跟postinst差不多，和Installer时代的“ahhhh”比较相似。<br>关于extrainst_的详情可以看看这个：<a href="http://www.telesphoreo.org/piper" target="_blank" rel="noopener">http://www.telesphoreo.org/piper</a> … ptember/000252.html 5个脚本的编写方法基本是一样的，但为了适应Cydia的安装，在某些情况下需要进行特定的配置。 查看某些deb可能会发现这样的语句：</p><pre><code>if [[ $1 == install || $1 == upgrade ]]; then</code></pre><p>这种语句是为了区别安装/升级/卸载而准备的脚本。$1是一个外部变量，将这个外部变量传入脚本来执行，而这个外部变量是由Cydia软件自身生成的。 简单来说，如果是安装，则是 $1 == install ；如果是升级，则是$1 == upgrade；如果是卸载则是 $1 == remove。 if 是个判断语句，当满足if后[ ]中的指定条件时，if中的内容就会执行。那么这里就可以通过设定install/upgrade/remove来控制在不同操作时执行的命令。 但要注意的是，这个功能只能在Cydia中使用，其它的apt软件管理工具，如Icy，Rock等，不能识别这个命令，因此无法执行if中的语句，所以在写脚本的时候到底需不需要用这种格式，就看自己的需要了。 总体来说，Unix的脚本（Shell Script）有其固定的格式。 文件顶头为</p><pre><code>#!/bin/bash</code></pre><p>表示调用bash这个shell 之后就是运行的命令了。 脚本中如果需要注释，可以使用 # 符号。 以 # 开头的行会被当作注释，里面的内容在执行过程中没有意义。 通配符： * 最常用的两个命令自然是设置属性/权限/用户/组 设置属性/</p><h4 id="会使用到的系统命令操作"><a href="#会使用到的系统命令操作" class="headerlink" title="会使用到的系统命令操作"></a>会使用到的系统命令操作</h4><h5 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h5><pre><code>chmod 【-R】 属性 文件名</code></pre><p>由于deb的脚本执行都是在root用户下，因此不需要提升权限，即不需要使用sudo命令。 -R参数：表示递归，加上此参数会将指定的目录及其子目录的全部目录和文件的属性改变。 属性：有多种写法。具体可以看 <a href="http://baike.baidu.com/view/1229012.htm?fr=ala0_1" target="_blank" rel="noopener">http://baike.baidu.com/view/1229012.htm?fr=ala0_1</a> 比较常用的几种属性：</p><ul><li>chmod +x XXXXX 为文件增加可执行权限</li><li>chmod 0644 XXXXX 不可执行文件最常使用的权限</li><li>chmod 0755 XXXXX 可执行文件最常使用的权限</li></ul><p>实例：</p><pre><code>chmod -R 0755 /Applications/Cydia.app</code></pre><h5 id="设置用户-组"><a href="#设置用户-组" class="headerlink" title="设置用户/组"></a>设置用户/组</h5><pre><code>chown 【-R】 用户:组 文件名</code></pre><p>同样不需要sudo来提示权限。-R也是表示递归。 比如要将文件A设为root用户，wheel组，可以使用命令</p><pre><code>chown -R mobile:mobile /var/mobile/Documents</code></pre><h5 id="复制文件-文件夹"><a href="#复制文件-文件夹" class="headerlink" title="复制文件/文件夹"></a>复制文件/文件夹</h5><pre><code>cp 【参数】 原始文件 目的文件</code></pre><p>参数列表：</p><ul><li>-l（小写字母L）：创建硬链接，相当于一个镜像，而不是实际创建两个文件<br><code>cp -l abc def</code></li><li>-f：强行复制，如果目的文件已存在，覆盖之且不提示<br><code>cp -f abc def</code></li><li>-p：保留文件的属性、用户、组、时间戳等信息 <br> <code>cp -p abc def</code></li><li>-r和-R：作用都是递归，将文件夹下的全部子文件和子文件夹一起复制 <br> <code>cp -r abc/ def/</code></li><li>-s：创建符号链接而不是创建双份文件 <br> <code>cp -s abc/ def/</code></li><li>-n：如果目的文件已存在，则不覆盖且不提示 <br><code>cp -n abc def</code></li><li>-a：相当与-dR，保留文件自身的属性等数据，一并复制子文件/文件夹 <br> <code>cp -a abc/ def/</code></li></ul><h5 id="移动文件-文件夹-amp-重命名"><a href="#移动文件-文件夹-amp-重命名" class="headerlink" title="移动文件/文件夹 &amp; 重命名"></a>移动文件/文件夹 &amp; 重命名</h5><pre><code>mv 【参数】 源文件 目的文件</code></pre><p> -f：强行移动，如果目的文件已存在，覆盖之且不提示</p><blockquote><p>其实 mv  命令就是复制之后再删除，但 mv 命令会自动保留文件的属性等数据，移动文件夹时会自动移动子文件/子文件夹，因此都不需要另外的参数。 <br><br> 重命名是由mv命令来实现的，mv 就是将 源文件 移动到 目标文件的位置并以目标文件的文件名保存。</p></blockquote><h5 id="显示语句"><a href="#显示语句" class="headerlink" title="显示语句"></a>显示语句</h5><pre><code>echo &quot;Some Thing&quot;;</code></pre><p>示例：显示语句 “测试echo命令”。</p><pre><code>echo &quot;测试echo命令&quot;;</code></pre><h5 id="管理自启动服务"><a href="#管理自启动服务" class="headerlink" title="管理自启动服务"></a>管理自启动服务</h5><pre><code>launchctl load或unload  -w plist文件路径</code></pre><p>实例： 让wefit3自启动</p><pre><code>launchctl load -w /System/Library/LaunchDaemons/com.weiphone.fitx.plist</code></pre><p>禁用iPhone日志记录syslogd</p><pre><code>launchctl unload -w /System/Library/LaunchDaemons/com.apple.syslogd.plist</code></pre><blockquote><p>PS: 记录自启动进程的plist文件保存在以下两个目录： /System/Library/LaunchDaemons/ 和 /Library/LaunchDaemons/</p></blockquote><h5 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h5><pre><code>killall 进程名</code></pre><p>示例：关闭Safari进程</p><pre><code>killall safari</code></pre><h5 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h5><p>基本格式是</p><pre><code>if [ 判断条件一 ]; then    执行命令else   执行命令fi</code></pre><p>实例： 如果文件abc存在，则备份为abc.bak，否则将文件def重命名为abc</p><pre><code>if [ -f abc]; then    mv -f abc abc.bakelse    mv def abcfi</code></pre><p>其中[ -f abc ]可以由[ -e abc]取代 如果目录abc不存在，则新建一个目录abc</p><pre><code>if [ ! -e abc ]; then    mkdir abcfi</code></pre><h5 id="获取固件系统版本号"><a href="#获取固件系统版本号" class="headerlink" title="获取固件系统版本号"></a>获取固件系统版本号</h5><pre><code>sw_vers -productVersion</code></pre><h5 id="获取设备型号"><a href="#获取设备型号" class="headerlink" title="获取设备型号"></a>获取设备型号</h5><pre><code>uname -iuname -m</code></pre><h5 id="Cydia中安装完之后重新启动SpringBoard"><a href="#Cydia中安装完之后重新启动SpringBoard" class="headerlink" title="Cydia中安装完之后重新启动SpringBoard"></a>Cydia中安装完之后重新启动SpringBoard</h5><pre><code>declare -a cydiacydia=($CYDIA)if [[ ${CYDIA+@} ]]; then    eval &amp;quot;echo &amp;#39;finish:reboot&amp;#39; &amp;gt;&amp;amp;${cydia[0]}&amp;quot;fi</code></pre><h5 id="几个比较有用的实例"><a href="#几个比较有用的实例" class="headerlink" title="几个比较有用的实例"></a>几个比较有用的实例</h5><ul><li><p>备份 preinst（安装之前就要把原始文件备份，不能等到安装完已经覆盖以后才备份）<br></p><pre><code>if [ ! -f 原始文件备份 ]; then  echo &amp;quot;原始文件的备份已存在，跳过备份&amp;quot;else  cp -p 原始文件 原始文件备份  echo &amp;quot;原始文件已备份&amp;quot;fi</code></pre><p>postrm（还原备份）<br></p><pre><code>echo &quot;还原备份&quot;;mv -f 原始文件备份 原始文件</code></pre><p>备份操作在制作补丁的时候，尤其是替换类型的补丁时特别有用</p></li><li><p>判别具体固件版本 在control里可以通过Depends来设置依赖的固件版本，但有时候需要在某个特定固件版本下进行操作 比如说一个软件，要求固件版本大于或等于3.0，但在固件版本为3.1的时候必须删除某一个文件才能运行，那么脚本可以这样写：</p><pre><code>firmware=$(sw_vers -productVersion)if  [[ $firmware == 3.1 ]]; then  删除文件fi</code></pre></li><li>判别设备型号 当设备型号为iPod Touch时删除某个文件<pre><code>platform=$(uname -i)if [[ $platform == &amp;quot;N45AP&amp;quot; || $platform == &amp;quot;N72AP&amp;quot; || $platform == &amp;quot;N18AP&amp;quot; ]]; then  删除文件fi</code></pre>或<pre><code>platform=$(uname -m)if [ $platform == iPod* ]; then  删除文件fi</code></pre></li></ul><blockquote><p>更多关于Shell Script的信息请见 <a href="http://www.hack" target="_blank" rel="noopener">http://www.hack</a> base.com/tech/2009-10-10/56808.html</p></blockquote><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>如果在DEBIAN中有脚本存在，则需要将整个DEBIAN文件夹及子文件属性设为0755,如果没有脚本的话保留0644属性即可，0755属性也没问题。</p><pre><code>chmod -R 0755 DEBIAN</code></pre><p> 打包命令</p><pre><code> dpkg-deb -b PATH FILENAME</code></pre><p>其中PATH是打包deb的工作目录，DEBIAN文件夹需位于PATH指定的目录下 FILENAME是deb的文件名，这个可以自己决定。</p><p>以上命令打包deb默认是采用gz格式压缩，压缩率有限，如果要获得更改的压缩率（更小的文件体积），可以使用bzip2和lzma格式。 压缩为bzip2格式</p><pre><code>dpkg-deb -bZ bzip2 PATH FILENAME</code></pre><p>压缩为bzip2格式</p><pre><code>dpkg-deb -bZ lzma PATH FILENAME</code></pre><p>默认的gz格式压缩率最低，bzip2格式居中，lzma格式压缩率最高。（当然也会有例外）</p><blockquote><p>PS:</p><ul><li>压缩率越高，压缩时间越长，在iPhone上使用较高的压缩率有更大概率导致失去响应。</li><li>iPhone OS 2.x无lzma组件，因此无法安装lzma压缩的deb。iPhone OS 3.x可以解压lzma压缩。</li><li>如果deb包含的文件文本量比较大，那么一般可以获得不错的压缩率。但如果是像铃声，jpg/png图片这样文件本身就是压缩格式的情况，继续压缩的可能性就不高了，这类情况很难获得比较好的压缩率</li></ul></blockquote><h4 id="【可选】deb文件规范命名"><a href="#【可选】deb文件规范命名" class="headerlink" title="【可选】deb文件规范命名"></a>【可选】deb文件规范命名</h4><pre><code>dpkg-name abc_1.0.deb</code></pre><p>如果想指定文件名格式，可以使用</p><pre><code>dpkg-name --help</code></pre><blockquote><p>图形界面的deb制作工具 Debian Package Maker 网址： <a href="http://code.google.com/p/debianpackagemaker/" target="_blank" rel="noopener">http://code.google.com/p/debianpackagemaker/</a> 个人感觉不如直接在命令行里来的直观，有兴趣的朋友可以自己试试。  ［ 需要翻墙 ］</p></blockquote><h2 id="新-制作自己的deb文件"><a href="#新-制作自己的deb文件" class="headerlink" title="(新) 制作自己的deb文件"></a>(新) 制作自己的deb文件</h2><h3 id="安装theos"><a href="#安装theos" class="headerlink" title="安装theos"></a>安装theos</h3><p><a href="http://iphonedevwiki.net/index.php/Theos/Setup" target="_blank" rel="noopener">安装方法</a></p><p>选择theos的安装目录，官方建议放在默认的 /opt/theos.然后执行</p><pre><code>export THEOS=/opt/theos</code></pre><p>为了验证设置成功没有</p><pre><code>echo $THEOS</code></pre><p>如果打印 <code>/opt/theos</code> 说明摄制完成</p><p>Using git:</p><pre><code>git clone --recursive git://github.com/DHowett/theos.git /opt/theos</code></pre><p>Alternatively, you can use svn, if you prefer:</p><pre><code>svn co http://svn.howett.net/svn/theos/trunk $THEOS</code></pre><blockquote><p><code>git clone -b stableversion https://github.com/haorenqq/theos/ $THEOS</code><br>不要执行上面的语句，用上面的方法替换  特别感谢网名为逍遥笛子 的热心朋友 提供的分支，由于原theos最新的版本不兼容iosopendev，所以用15年的老版本</p></blockquote><p>以上操作，如果出现任何关于权限的错误。使用sudo就可以了。</p><h3 id="安装idld"><a href="#安装idld" class="headerlink" title="安装idld"></a>安装idld</h3><p>其实我不知道这个是干什么的？但是呢，说是签名的。。。但是我没用到过，但是还是记录一下毕竟有不少坑</p><p>按照官方的教程是如此的说的。</p><pre><code>git clone git://git.saurik.com/ldid.gitcd ldidgit submodule update --init./make.shcp -f ./ldid $THEOS/bin/ldid</code></pre><p>但是通常发生错误，<br>第一个错误就是 引入了 <code>#include &lt;openssl/err.h&gt;</code> ，默认是不存在 这个文件夹的额。<br>第二个错误就是 make.sh中的代码默认是只匹配Xcode5-1-1的名称，所以需要修改 make 文件。</p><p>下载 <a href="/publicFiles/iosOpenDev安装附件-新.zip">文件</a> 修复</p><p>接下来使用命令。生成 ldid 文件<code>./make.sh</code> . 反正我是生成失败了</p><p>你可以直接下载别人已经编译完成的文件 <a href="/publicFiles/ldid">ldid文件</a></p><p>之后将文件拷贝到 <code>/opt/theos/bin</code> 下就可以了</p><h3 id="安装iOSOpenDev"><a href="#安装iOSOpenDev" class="headerlink" title="安装iOSOpenDev"></a>安装iOSOpenDev</h3><pre class="line-numbers language-shell"><code class="language-shell">git clone https://github.com/AimobierExample/iOSOpenDevInstallFixcd iOSOpenDevInstallFixsh repair.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后打开 <code>iOSOpenDev-1.6-2.pkg</code> 按照提示就可以安装完成了</p><p>打开xcode就可以看见越狱的项目了 选择 <code>Logos TWeak</code></p><p>按照xm文件内的提示，libsubstrate.dylib添加到工程中(在安装好的/opt/iOSOpenDev/lib 目录下)，然后把xm中的内容清空。mm文件的内容会根据xm文件中的内容编译后自动生成。</p><pre><code>%hook SpringBoard  - (void)applicationDidFinishLaunching:(id)application{      %orig;        UIAlertView * alert = [[UIAlertView alloc]initWithTitle:@&quot;Welcome&quot; message:@&quot;HelloWorld!&quot; delegate:nil cancelButtonTitle:@&quot;Thanks&quot; otherButtonTitles:nil];      [alert show];  }  %end</code></pre><p>点击菜单 <code>Product - Build For - Profiling</code> 这个时候通常会报错，因为真机调试会出现问题</p><pre><code>Failed to create directory /var/root/iOSOpenDevPackages on device 你的iOS设备IP地址</code></pre><p>但是此刻已经在项目根目录下出现了 变已完成的 deb文件了，你可以直接添加到咱们的源服务器中，按照之前的教程生成 packages 完成安装。</p><h3 id="真机调试"><a href="#真机调试" class="headerlink" title="真机调试"></a>真机调试</h3><p>现在调试越狱设备，在已经越狱的手机上打开Cydia，搜索下列插件<br>如果搜索不到，打开软件源-编辑 删除BigBos和ModMyi，再回到首页，点击更多软件源，重新添加这两个即可搜索到下列插件</p><pre><code>Core UtilitiesCore Utilities(/bin)diskdev-cmdsfile-cmdssystem-cmdsMobileterminalopenSSHsshpasstoggle sshpreferencdloadersubstrate safe modesyslogd to /var/log/syslog</code></pre><p>再在Xcode中的Target的Build Settings中的Code Signing中，改为Don’t Code Sign.<br>最后打开Target-Build Settings 找到iOSOpenDevDevice选项，填入越狱手机的本地ip</p><p>之后打开终端创建key</p><pre><code>iosod sshkey -h 192.168.23.71（换成你的iOS设备IP地址）</code></pre><p>创建完成</p><p>点击菜单 <code>Product - Build For - Profiling</code></p><p>就可以安装到设备，安装完成之后，设备回自己重启，之后就会弹出了一个alertView。</p><h2 id="Theos-创建-Cydia-应用"><a href="#Theos-创建-Cydia-应用" class="headerlink" title="Theos 创建 Cydia 应用"></a>Theos 创建 Cydia 应用</h2><h3 id="首先安装-Theos"><a href="#首先安装-Theos" class="headerlink" title="首先安装 Theos"></a>首先安装 Theos</h3><p><a href="http://iphonedevwiki.net/index.php/Theos/Setup" target="_blank" rel="noopener">安装方法</a></p><p>选择theos的安装目录，官方建议放在默认的 /opt/theos.然后执行</p><pre><code>export THEOS=/opt/theos</code></pre><p>为了验证设置成功没有</p><pre><code>echo $THEOS</code></pre><p>如果打印 <code>/opt/theos</code> 说明摄制完成</p><p>Using git:</p><pre><code>git clone --recursive git://github.com/DHowett/theos.git /opt/theos</code></pre><h3 id="使用Theos创建应用"><a href="#使用Theos创建应用" class="headerlink" title="使用Theos创建应用"></a>使用Theos创建应用</h3><p>安装完成之后 使用：</p><pre><code>/opt/theos/bin/nic.pl</code></pre><p>调用之后</p><pre class="line-numbers language-shell"><code class="language-shell">msiter:~ jingwenzheng$ /opt/theos/bin/nic.plNIC 2.0 - New Instance Creator------------------------------  [1.] iphone/activator_event  [2.] iphone/application_modern  [3.] iphone/cydget  [4.] iphone/flipswitch_switch  [5.] iphone/framework  [6.] iphone/ios7_notification_center_widget  [7.] iphone/library  [8.] iphone/notification_center_widget  [9.] iphone/preference_bundle_modern  [10.] iphone/tool  [11.] iphone/tweak  [12.] iphone/xpc_serviceChoose a Template (required): 2Project Name (required): DemoPackage Name [com.yourcompany.demo]: com.demoAuthor/Maintainer Name [荆文征]: jwz[iphone/application_modern] Class name prefix (two or more characters) [XX]: demoInstantiating iphone/application_modern in demo/...Done.msiter:~ jingwenzheng$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就创建完成了</p><h3 id="运行到真机"><a href="#运行到真机" class="headerlink" title="运行到真机"></a>运行到真机</h3><p>首先要确保震级上面安装 openssh</p><pre><code>ssh root@ip地址</code></pre><p>密码。默认为 alpine</p><p>这样连接上就说明安装完成，可以调用的到～</p><p>之后设置环境变量<code>THEOS_DEVICE_IP</code> 为 真机 IP。</p><p>之后 cd 目录。 使用命令安装到真机上</p><pre><code>make package install</code></pre><h4 id="第一个问题-ldid"><a href="#第一个问题-ldid" class="headerlink" title="第一个问题 ldid"></a>第一个问题 ldid</h4><p>你可以直接下载别人已经编译完成的文件 <a href="/publicFiles/ldid">ldid文件</a></p><p>之后将文件拷贝到 <code>/opt/theos/bin</code> 下就可以了</p><p>默认是没有权限的 所以可能需要 <code>sudo</code>. 复制完成之后赋予权限<code>sudo chmod 777 /opt/theos/bin/ldid</code></p><h4 id="第二个问题-dpkg"><a href="#第二个问题-dpkg" class="headerlink" title="第二个问题 dpkg"></a>第二个问题 dpkg</h4><p>没有安装文件工具</p><pre><code>brew install dpkg</code></pre><h4 id="dpkg-1-18-14-版本问题"><a href="#dpkg-1-18-14-版本问题" class="headerlink" title="dpkg 1.18.14 版本问题"></a>dpkg 1.18.14 版本问题</h4><p>在 <code>1.18.14</code> 版本，dpkg <code>lzma</code> 不能使用了，必须使用 <code>xz</code></p><h4 id="这个时候需要修改-opt-theos-makefiles-package-deb-mk-文件"><a href="#这个时候需要修改-opt-theos-makefiles-package-deb-mk-文件" class="headerlink" title="这个时候需要修改 /opt/theos/makefiles/package/deb.mk 文件"></a>这个时候需要修改 <code>/opt/theos/makefiles/package/deb.mk</code> 文件</h4><pre class="line-numbers language-Makefile"><code class="language-Makefile">ifeq ($(_THEOS_PACKAGE_FORMAT_LOADED),)_THEOS_PACKAGE_FORMAT_LOADED := 1_THEOS_DEB_PACKAGE_CONTROL_PATH := $(or $(wildcard $(THEOS_PROJECT_DIR)/control),$(wildcard $(THEOS_PROJECT_DIR)/layout/DEBIAN/control))_THEOS_DEB_CAN_PACKAGE := $(if $(_THEOS_DEB_PACKAGE_CONTROL_PATH),$(_THEOS_TRUE),$(_THEOS_FALSE))_THEOS_DEB_HAS_DPKG_DEB := $(call __executable,dpkg-deb)ifneq ($(_THEOS_DEB_HAS_DPKG_DEB),$(_THEOS_TRUE))internal-package-check::    @echo "$(MAKE) package requires dpkg-deb."; exit 1endififeq ($(_THEOS_DEB_CAN_PACKAGE),$(_THEOS_TRUE)) # Control file found (or layout/ found.)THEOS_PACKAGE_NAME := $(shell grep -i "^Package:" "$(_THEOS_DEB_PACKAGE_CONTROL_PATH)" | cut -d' ' -f2-)THEOS_PACKAGE_ARCH := $(shell grep -i "^Architecture:" "$(_THEOS_DEB_PACKAGE_CONTROL_PATH)" | cut -d' ' -f2-)THEOS_PACKAGE_BASE_VERSION := $(shell grep -i "^Version:" "$(_THEOS_DEB_PACKAGE_CONTROL_PATH)" | cut -d' ' -f2-)$(_THEOS_ESCAPED_STAGING_DIR)/DEBIAN:    $(ECHO_NOTHING)mkdir -p "$(THEOS_STAGING_DIR)/DEBIAN"$(ECHO_END)ifeq ($(_THEOS_HAS_STAGING_LAYOUT),1) # If we have a layout/ directory, copy layout/DEBIAN to the staging directory.    $(ECHO_NOTHING)[ -d "$(THEOS_PROJECT_DIR)/layout/DEBIAN" ] && rsync -a "$(THEOS_PROJECT_DIR)/layout/DEBIAN/" "$(THEOS_STAGING_DIR)/DEBIAN" $(_THEOS_RSYNC_EXCLUDE_COMMANDLINE) || true$(ECHO_END)endif # _THEOS_HAS_STAGING_LAYOUT$(_THEOS_ESCAPED_STAGING_DIR)/DEBIAN/control: $(_THEOS_ESCAPED_STAGING_DIR)/DEBIAN    $(ECHO_NOTHING)sed -e '/^[Vv]ersion:/d' "$(_THEOS_DEB_PACKAGE_CONTROL_PATH)" > "$@"$(ECHO_END)    $(ECHO_NOTHING)echo "Version: $(_THEOS_INTERNAL_PACKAGE_VERSION)" >> "$@"$(ECHO_END)    $(ECHO_NOTHING)echo "Installed-Size: $(shell du $(_THEOS_PLATFORM_DU_EXCLUDE) DEBIAN -ks "$(THEOS_STAGING_DIR)" | cut -f 1)" >> "$@"$(ECHO_END)before-package:: $(_THEOS_ESCAPED_STAGING_DIR)/DEBIAN/control_THEOS_DEB_PACKAGE_FILENAME = $(THEOS_PACKAGE_DIR)/$(THEOS_PACKAGE_NAME)_$(_THEOS_INTERNAL_PACKAGE_VERSION)_$(THEOS_PACKAGE_ARCH).debinternal-package::    $(ECHO_NOTHING)COPYFILE_DISABLE=1 $(FAKEROOT) -r dpkg-deb -Zgzip -b "$(THEOS_STAGING_DIR)" "$(_THEOS_DEB_PACKAGE_FILENAME)" $(STDERR_NULL_REDIRECT)$(ECHO_END)# This variable is used in package.mkafter-package:: __THEOS_LAST_PACKAGE_FILENAME = $(_THEOS_DEB_PACKAGE_FILENAME)else # _THEOS_DEB_CAN_PACKAGE == 0internal-package::    @echo "$(MAKE) package requires you to have a layout/ directory in the project root, containing the basic package structure, or a control file in the project root describing the package."; exit 1endif # _THEOS_DEB_CAN_PACKAGEendif # _THEOS_PACKAGE_FORMAT_LOADED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样按理就可以运行了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-155012621.jpg&quot; alt=&quot;&quot; title=&quot;夜里不睡的人，白天多多少少总有什么逃避掩饰的吧。白昼解不开的结黑夜慢慢耗&quot;&gt;&lt;/p&gt;
&lt;p&gt;大家肯定都知道 Cydia 吧，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iPhone、iPod touch、iPad等设备上的一种破解软件，类似苹果在线软件商店iTunes Store 的软件平台的客户端，在越狱的过程中被装入到系统中的，其中多数为iPhone、iPod Touch、ipad的第三方软件和补丁，主要都是弥补系统不足用。是由Jay Freeman（Saurik）领导，Okori Group以及UCSB大学合作开发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前用了很多好用的源，但是很好奇的是，他们是怎么制作的呢？为什么越狱之后就可以这么厉害呢？&lt;br&gt;那么怎么制作这么一个东西&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="越狱" scheme="http://www.msiter.com/tags/%E8%B6%8A%E7%8B%B1/"/>
    
      <category term="cydia" scheme="http://www.msiter.com/tags/cydia/"/>
    
      <category term="制作源" scheme="http://www.msiter.com/tags/%E5%88%B6%E4%BD%9C%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>WKWebView 制作详情页的一些经验</title>
    <link href="http://www.msiter.com/2016/09/21/WKWebView%20%E5%88%B6%E4%BD%9C%E8%AF%A6%E6%83%85%E9%A1%B5%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/"/>
    <id>http://www.msiter.com/2016/09/21/WKWebView 制作详情页的一些经验/</id>
    <published>2016-09-21T03:25:00.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>好久好久没有更新过博客了，今天去面试了一家公司。被询问到关于资讯类App的详情页问题，想到了很多之前做详情页时候遇见的问题和解决的问题，所以心血来潮的想记录下来。</p><p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-184033745.jpg" alt="" title="只有一种英雄主义，就是在认清这个世界之后依然热爱他。 ——罗曼罗兰。"></p><a id="more"></a><h2 id="如何去展示一个详情页呢"><a href="#如何去展示一个详情页呢" class="headerlink" title="如何去展示一个详情页呢"></a>如何去展示一个详情页呢</h2><p>那么废话少说，亮剑吧！</p><h3 id="如何去显示一个WKWebView呢"><a href="#如何去显示一个WKWebView呢" class="headerlink" title="如何去显示一个WKWebView呢"></a>如何去显示一个WKWebView呢</h3><p>其实怎么说呢，我觉的其实吧。每个人都大同小异。无非就是如何将数据转换成Html并且将字符串传递给WebView。之后展示出来而已。那么我们很快就会遇到第一个问题。如何将数据转换成Html格式的字符串呢？</p><h4 id="搞定我们的模板君"><a href="#搞定我们的模板君" class="headerlink" title="搞定我们的模板君"></a>搞定我们的模板君</h4><p>我不清楚其他开发者们遇见的数据结构，但是我的数据结构如下/</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//  NewContent.swift</span><span class="token comment" spellcheck="true">//  Journalism</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//  Created by Mister on 16/5/30.</span><span class="token comment" spellcheck="true">//  Copyright © 2016年 aimobier. All rights reserved.</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">import</span> <span class="token builtin">RealmSwift</span><span class="token comment" spellcheck="true">///  频道的数据模型</span>open <span class="token keyword">class</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token builtin">Object</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 用于获取评论的 docid</span>    <span class="token keyword">dynamic</span> <span class="token keyword">var</span> txt<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span>    <span class="token comment" spellcheck="true">/// 新闻Url</span>    <span class="token keyword">dynamic</span> <span class="token keyword">var</span> img<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span>    <span class="token comment" spellcheck="true">/// 新闻标题</span>    <span class="token keyword">dynamic</span> <span class="token keyword">var</span> vid<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">///  频道的数据模型</span>open <span class="token keyword">class</span> <span class="token class-name">NewContent</span><span class="token punctuation">:</span> <span class="token builtin">Object</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 新闻ID</span>    <span class="token keyword">dynamic</span> <span class="token keyword">var</span> nid <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">// 新闻的详情</span>    <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token builtin">List</span><span class="token operator">&lt;</span><span class="token builtin">Content</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Should be declared with `let`</span>    <span class="token comment" spellcheck="true">// More ……</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详情页对象包含三个字段 <code>img</code>,<code>txt</code>,<code>vid</code>。也就是图片，文字，视频三种类型。<br>那这样就简单了。把他们拼装成一个Html 还不简单~  </p><pre><code>String += String // ?????  这样子？  我是拒绝的……</code></pre><p>之后想起来之前做服务的时候 jsq，ejs… 这些视图模板都是可以完成现在的需求的，不知道IOS 有没有呢？</p><p>所以说！  废话！  当然有啊！ <a href="https://github.com/mattgemmell/MGTemplateEngine" target="_blank" rel="noopener">MGTemplateEngine</a></p><p>这就是了~  但是！！！  问题这个大神没有使用那个第三方的管理插件来让别人导入自己的框架~  难道我又要回归到 之前那段 被拖拽引入所支配的恐惧吗？</p><pre><code>???? 我还是拒绝的~~~</code></pre><p>那么接下来就有两种方式来引入这个框架了~  当然了 全都是 Cocoapods的……</p><p>第一种使用 本地引入的方式：</p><p>如果你想本地引入的话，那很简单的</p><p>在你的项目根目录下建立一个文件夹 取名字呢~  就叫做 MGTemplateEngine ，之后 把 clone 下来的 MGTemplateEngine 项目放入一个新建的Classes 目录下。之后再classes 同级目录中新建一个 文件 <code>MGTemplateEngine.podspec</code></p><p>里面的代码呢，大概写成这样子</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Be sure to run `pod lib lint SwaggerClient.podspec' to ensure this is a</span><span class="token comment" spellcheck="true"># valid spec and remove all comments before submitting the spec.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Any lines starting with a # are optional, but encouraged</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html</span><span class="token comment" spellcheck="true">#</span><span class="token constant">Pod</span><span class="token punctuation">:</span><span class="token symbol">:Spec</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">do</span> <span class="token operator">|</span>s<span class="token operator">|</span>    s<span class="token punctuation">.</span>name             <span class="token operator">=</span> <span class="token string">"MGTemplateEngine"</span>    s<span class="token punctuation">.</span>version          <span class="token operator">=</span> <span class="token string">"1.0.0"</span>    s<span class="token punctuation">.</span>summary          <span class="token operator">=</span> <span class="token string">"奇点资讯"</span>    s<span class="token punctuation">.</span>description      <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token constant">DESC</span>                        <span class="token keyword">if</span> you～  <span class="token constant">Shabi</span> <span class="token constant">Boom</span> <span class="token constant">Sha</span> <span class="token constant">Ga</span> la ga                         <span class="token constant">DESC</span>    s<span class="token punctuation">.</span>platform     <span class="token operator">=</span> <span class="token symbol">:ios</span><span class="token punctuation">,</span> <span class="token string">'7.0'</span>    s<span class="token punctuation">.</span>requires_arc <span class="token operator">=</span> <span class="token keyword">true</span>    s<span class="token punctuation">.</span>framework    <span class="token operator">=</span> <span class="token string">'SystemConfiguration'</span>    s<span class="token punctuation">.</span>homepage     <span class="token operator">=</span> <span class="token string">"https://github.com/swagger-api/swagger-codegen"</span>    s<span class="token punctuation">.</span>license      <span class="token operator">=</span> <span class="token string">"MIT"</span>    s<span class="token punctuation">.</span>source       <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token symbol">:git</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"https://github.com/swagger-api/swagger-codegen.git"</span><span class="token punctuation">,</span> <span class="token symbol">:tag</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span>s<span class="token punctuation">.</span>version<span class="token delimiter tag">}</span></span>"</span> <span class="token punctuation">}</span>    s<span class="token punctuation">.</span>author       <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Swagger"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"apiteam@swagger.io"</span> <span class="token punctuation">}</span>    s<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string">'Classes/**/*'</span>    s<span class="token punctuation">.</span>public_header_files <span class="token operator">=</span> <span class="token string">'Classes/**/*.h'</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有说大概的目录分布呢~  是这个样子的~</p><pre><code>── 项目根目录 ├ MGTemplateEngine ├──────├ MGTemplateEngine.podspec ├──────├ Classes │      └──── MGTemplateEngine 所有的文件 └ 你的其他文件</code></pre><p>之后呢，在你项目中的Podfile 写下这样的代码~</p><pre class="line-numbers language-ruby"><code class="language-ruby">    pod <span class="token string">'MGTemplateEngine'</span><span class="token punctuation">,</span> <span class="token symbol">:path</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'MGTemplateEngine/'</span>     <span class="token comment" spellcheck="true">## MGTemplateEngine组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行完成 pod install~  Woooooo~ 搞定~</p><p>第二种呢</p><pre class="line-numbers language-ruby"><code class="language-ruby">    pod <span class="token string">'JMGTemplateEngine'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个东西是我自己做的为了方便………………</p><p>运行完成 pod install~  Woooooo~ 搞定~</p><h4 id="显示出来我们的详情吧"><a href="#显示出来我们的详情吧" class="headerlink" title="显示出来我们的详情吧~"></a>显示出来我们的详情吧~</h4><p>没什么好说的直接上代码吧</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token builtin">MGTemplateEngine</span><span class="token keyword">extension</span> <span class="token builtin">MGTemplateEngine</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> shareTemplateEngine<span class="token punctuation">:</span><span class="token builtin">MGTemplateEngine</span><span class="token operator">!</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> templateEngine <span class="token operator">=</span> <span class="token function">MGTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        templateEngine<span class="token punctuation">.</span>matcher <span class="token operator">=</span> <span class="token function">ICUTemplateMatcher</span><span class="token punctuation">(</span>templateEngine<span class="token punctuation">:</span> templateEngine<span class="token punctuation">)</span>        <span class="token keyword">return</span> templateEngine    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">getHtmlResourcesString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">String</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> variables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token string">"source"</span><span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>pname<span class="token punctuation">,</span><span class="token string">"ptime"</span><span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>ptime<span class="token punctuation">,</span><span class="token string">"theme"</span><span class="token punctuation">:</span><span class="token string">"normal"</span><span class="token punctuation">,</span><span class="token string">"body"</span><span class="token punctuation">:</span>body<span class="token punctuation">]</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token builtin">MGTemplateEngine</span><span class="token punctuation">.</span>shareTemplateEngine<span class="token punctuation">.</span><span class="token function">processTemplateInFile</span><span class="token punctuation">(</span>atPath<span class="token punctuation">:</span> templatePath<span class="token punctuation">,</span> withVariables<span class="token punctuation">:</span> variables<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token operator">!</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样子我们就得到了Html 的String 对象，在这个时候，我们只要 使用WkWebView的 <code>loadHTMLString</code> 方法就OK了啊～</p><p>是的我们很快的就发现了～　　我们真的可以展示了～　　</p><p>但是，行高怎么办呢？　　那我们很快就遇到了我们的几个坎</p><h2 id="遇到的坎坷"><a href="#遇到的坎坷" class="headerlink" title="遇到的坎坷"></a>遇到的坎坷</h2><p>虽然展示完成了，但是接下来我们就遇到了几个问题。</p><p>接下来针对这几个问题，我来给你说说，我是怎么解决的</p><h3 id="WebView和JS的交互"><a href="#WebView和JS的交互" class="headerlink" title="WebView和JS的交互"></a>WebView和JS的交互</h3><p>在看接下来的之前咱们需要知道一个知识点就是WKWebVIew和js的交互</p><pre class="line-numbers language-swift"><code class="language-swift">       <span class="token keyword">let</span> configuration <span class="token operator">=</span> <span class="token function">WKWebViewConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       configuration<span class="token punctuation">.</span>userContentController<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"JSBridge"</span><span class="token punctuation">)</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>webView <span class="token operator">=</span> <span class="token function">WKWebView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token function">CGRect</span><span class="token punctuation">(</span>origin<span class="token punctuation">:</span> <span class="token builtin">CGPoint</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token function">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">:</span> configuration<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个<code>JSBridge</code>就是我们自定义的桥连对象，使用这个桥连对象就可以实现交互了</p><p>WKWebView -&gt; javaScript的操作</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">self</span><span class="token punctuation">.</span>webView<span class="token punctuation">.</span><span class="token function">evaluateJavaScript</span><span class="token punctuation">(</span><span class="token string">"js 语句"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">_</span><span class="token punctuation">)</span> <span class="token keyword">in</span>  <span class="token comment" spellcheck="true">// data 就是反回的数据</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>javaScript –&gt; WKWebView的操作</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>window<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span>messageHandlers<span class="token punctuation">.</span>JSBridge<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后再咱们的项目中实现<code>WKScriptMessageHandler</code>代理方法</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function">userContentController</span><span class="token punctuation">(</span><span class="token number">_</span> userContentController<span class="token punctuation">:</span> <span class="token builtin">WKUserContentController</span><span class="token punctuation">,</span> didReceive message<span class="token punctuation">:</span> <span class="token builtin">WKScriptMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">guard</span> <span class="token keyword">let</span> bodyData <span class="token operator">=</span> message<span class="token punctuation">.</span>body <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">Dictionary</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">AnyObject</span><span class="token operator">></span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">/// bodyDaya 就是咱们的传入的对象 这里根据自己传入的类型机型 options 判断即可</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中JSBridge 对象就是咱们的自定义桥连对象</p><p>这样就可以实现交互了</p><h3 id="高度的计算问题"><a href="#高度的计算问题" class="headerlink" title="高度的计算问题"></a>高度的计算问题</h3><p>相信很朋友也都查阅了很多东西，知道了 调用 JS的 高度计算方法 .       </p><p><code>document.getElementById(&#39;section&#39;).offsetHeight</code></p><p>我的主要内容都是显示在一个 section的Div里的，你们各位也请进行自己的计算。</p><p>那好吧，我们就来做吧~~~</p><p>首先我们先监听 WebView 加载完成页面之后的事件，那么我们先实现它的Delegate吧。</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">/// 加载完成</span><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function">webView</span><span class="token punctuation">(</span><span class="token number">_</span> webView<span class="token punctuation">:</span> <span class="token builtin">WKWebView</span><span class="token punctuation">,</span> didFinish navigation<span class="token punctuation">:</span> <span class="token builtin">WKNavigation</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 执行方法</span>  <span class="token keyword">self</span><span class="token punctuation">.</span>webView<span class="token punctuation">.</span><span class="token function">evaluateJavaScript</span><span class="token punctuation">(</span><span class="token string">"document.getElementById('section').offsetHeight"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">_</span><span class="token punctuation">)</span> <span class="token keyword">in</span>              <span class="token keyword">if</span> <span class="token keyword">let</span> height <span class="token operator">=</span> data <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">CGFloat</span><span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>webView<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">!=</span> height<span class="token operator">+</span><span class="token number">35</span> <span class="token punctuation">{</span>                      <span class="token keyword">self</span><span class="token punctuation">.</span>webView<span class="token punctuation">.</span><span class="token function">layoutIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token keyword">self</span><span class="token punctuation">.</span>webView<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token operator">+</span><span class="token number">35</span>                      <span class="token keyword">self</span><span class="token punctuation">.</span>tableView<span class="token punctuation">.</span>tableHeaderView <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>webView                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们会发觉，好了啊~  那么接下来咱们就遇到了，咱们的第二个坎</p><h3 id="图片LazyLoad的问题"><a href="#图片LazyLoad的问题" class="headerlink" title="图片LazyLoad的问题"></a>图片LazyLoad的问题</h3><p>可能在这里很多用户就会察觉到这个，当咱们的新闻详情很多图片的时候，咱们就会出现加载时间巨长的问题。主要是因为Html界面呢，他不是咱们的tableView,ios的加载机制，是快要显示了开始准备渲染Cell，而Html是全部渲染完成，之后你爱怎么滑怎么滑。所以当图片过大的时候。就会出现加载时间很长的问题了<br>那么自然而然的想到了使用咱们的lazyload。也就是俗称的 懒加载。</p><p>现在世面上的懒加载，都是一个样子的，给你提供一个自定义的额属性。比如<code>lazysrc</code>，设置成咱们需要加载的网络图片，而<code>src</code>设置成咱们的没有加载出来的占位图片。之后检测页面的滑动情况，当检测到快或者需要显示<code>&lt;img&gt;</code>标签的时候，进行吧 <code>lazysrc</code>赋值<code>src</code>的这么一个操作。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-1.11.0.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery.lazyload.js?v<span class="token punctuation">=</span>1.9.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在网上随便找了一个测试发觉没用还是慢啊，之后抓包，发现图片还是一起加载的。即使没有滑动……</p><p>这是怎么回事儿呢？</p><p>其实不难理解，咱们的懒加载计算的是通过偏移位置来计算的，什么事偏移位置呢。。其实这个地方用图的方式更好，但是我不知道用什么画……</p><p>那么咱们给webView的设置的就是咱们的所有的html的高度，他根本就不需要偏移就可以显示所有的内容了，这也就是我们的lazyload.js 没有效果的原因了。<br>那么我们怎么解决这个问题呢？</p><p>我是这样做的，因为我的WebView是tableView的表视图，那么我就实现了 scrollView的代理方法</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">/**  主要是为了针对于党图片延时加载之后的webvView高度问题  - parameter scrollView: 滑动视图  */</span> <span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function">scrollViewDidScroll</span><span class="token punctuation">(</span><span class="token number">_</span> scrollView<span class="token punctuation">:</span> <span class="token builtin">UIScrollView</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token builtin">UIScreen</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>height<span class="token operator">+</span>scrollView<span class="token punctuation">.</span>contentOffset<span class="token punctuation">.</span>y     <span class="token keyword">self</span><span class="token punctuation">.</span>webView<span class="token punctuation">.</span><span class="token function">evaluateJavaScript</span><span class="token punctuation">(</span><span class="token string">"scrollMethod(<span class="token interpolation"><span class="token delimiter variable">\(</span>height<span class="token delimiter variable">)</span></span>)"</span><span class="token punctuation">,</span> completionHandler<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>     <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">adaptionWebViewHeightMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这个方法不断检测页面的偏移量</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">scrollMethod</span><span class="token punctuation">(</span>offesty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// &lt;!-- 更多的操作></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个操作里进行图片的循环跟我们传入的便宜量对比，如果快要展示了，那么咱们就把咱们设置的 属性替换成图片的src ，这个子就实现了图片的懒加载了</p><h3 id="关于图片点击问题"><a href="#关于图片点击问题" class="headerlink" title="关于图片点击问题"></a>关于图片点击问题</h3><p>这个点击问题，相信大家看到这里就应该已经知道该怎么做了。对了…………</p><p>当然是使用js方法桥连了</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#body_section img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       window<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span>messageHandlers<span class="token punctuation">.</span>JSBridge<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>           <span class="token string">"index"</span><span class="token punctuation">:</span> index       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function">userContentController</span><span class="token punctuation">(</span><span class="token number">_</span> userContentController<span class="token punctuation">:</span> <span class="token builtin">WKUserContentController</span><span class="token punctuation">,</span> didReceive message<span class="token punctuation">:</span> <span class="token builtin">WKScriptMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> bodyData <span class="token operator">=</span> message<span class="token punctuation">.</span>body <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">Dictionary</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">AnyObject</span><span class="token operator">></span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> type <span class="token operator">=</span> bodyData<span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">Int</span> <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>           <span class="token keyword">if</span> type <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">/// 图片展示</span>           <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这就又有了一个问题，就是咱们的webview和咱们的图片展示VC的图片加载的方式是不一样的。我这里先讲讲我的，之前找到使用 webview的缓存？还是什么的，还没有研究……</p><h3 id="关于图片重复加载的问题。"><a href="#关于图片重复加载的问题。" class="headerlink" title="关于图片重复加载的问题。"></a>关于图片重复加载的问题。</h3><p>其实这里的问题，就难点了，我是想了很久，该怎么解决，因为这样还涉及到一个问题，就是给图片添加进度条的问题。</p><p>先说说解决办法吧，心路历程就不说了。首先咱们的不是可以控制图片的何时加载了吗？那么咱们可不可以更厉害一点呢？让我们的图片该要加载的时候把请求链接传给我们，我们进行我们的缓存策略。<code>SD</code> <code>PIN</code> 随便了就。</p><p>答案是肯定的。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> datasrc <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-src"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">&lt;</span> offesty <span class="token operator">+</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> ajaxUrl<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ajaxUrl<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>            window<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span>messageHandlers<span class="token punctuation">.</span>JSBridge<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                <span class="token string">"index"</span><span class="token punctuation">:</span> index<span class="token punctuation">,</span>                <span class="token string">"url"</span><span class="token punctuation">:</span> datasrc            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 ajaxurl存储了已经添加的 index 如果，没有这个东西的话，我们只要一滑动，那就蹭蹭蹭的传递给我们url，我们就有的加载了……   这可不是我们想要的。</p><p>那么在我们接收到URL的加载的请求，那么我们就开始加载吧~~</p><pre class="line-numbers language-swift"><code class="language-swift">fileprivate <span class="token keyword">func</span> <span class="token function">HandlePinDownLoadResult</span><span class="token punctuation">(</span><span class="token number">_</span> finish<span class="token punctuation">:</span>@<span class="token function">escaping</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">,</span>result<span class="token punctuation">:</span><span class="token builtin">PINRemoteImageManagerResult</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 含有静态图片</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> img <span class="token operator">=</span> result<span class="token punctuation">.</span>image <span class="token punctuation">,</span><span class="token keyword">let</span> base64 <span class="token operator">=</span> <span class="token function">UIImageJPEGRepresentation</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">base64EncodedString</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> <span class="token builtin">NSData</span><span class="token punctuation">.</span><span class="token builtin">Base64EncodingOptions</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span>qos<span class="token punctuation">:</span> <span class="token punctuation">.</span>background<span class="token punctuation">)</span><span class="token punctuation">.</span>async <span class="token punctuation">{</span>            <span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">"data:image/jpeg;base64,<span class="token interpolation"><span class="token delimiter variable">\(</span>base64<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">.</span><span class="token function">replaceRegex</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceRegex</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>execute<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">finish</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 含有动态图片</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> img <span class="token operator">=</span> result<span class="token punctuation">.</span>animatedImage <span class="token punctuation">{</span>        <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span>qos<span class="token punctuation">:</span> <span class="token builtin">DispatchQoS</span><span class="token punctuation">.</span><span class="token builtin">QoSClass</span><span class="token punctuation">.</span>background<span class="token punctuation">)</span><span class="token punctuation">.</span>async <span class="token punctuation">{</span>            <span class="token keyword">let</span> base64 <span class="token operator">=</span> img<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">base64EncodedString</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> <span class="token builtin">NSData</span><span class="token punctuation">.</span><span class="token builtin">Base64EncodingOptions</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">"data:image/gif;base64,<span class="token interpolation"><span class="token delimiter variable">\(</span>base64<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">.</span><span class="token function">replaceRegex</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceRegex</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>execute<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">finish</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就实现了图片的本地缓存策略了~但是问题又来了……  首先就是遇到大的图片尤其是gif那个base64解析真是慢啊…… 而且每次重新打开 webview 就算是已经下载好了，光是base64解析也要小一会儿了……</p><h3 id="base64的问题"><a href="#base64的问题" class="headerlink" title="base64的问题"></a>base64的问题</h3><p>那还真没好的办法，，缓存吧………………</p><pre class="line-numbers language-swift"><code class="language-swift">fileprivate <span class="token keyword">func</span> <span class="token function">DownloadImageByUrl</span><span class="token punctuation">(</span><span class="token number">_</span> progress<span class="token punctuation">:</span>@<span class="token function">escaping</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">,</span>finish<span class="token punctuation">:</span>@<span class="token function">escaping</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 先读缓存 没有咱们再进行后续工作</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token builtin">PINCache</span><span class="token punctuation">.</span><span class="token function">shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token string">"hanle<span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token keyword">self</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">finish</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>    <span class="token builtin">PINRemoteImageManager</span><span class="token punctuation">.</span><span class="token function">shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">downloadImage</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> url<span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token function">PINRemoteImageManagerDownloadOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token keyword">in</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">HandlePinDownLoadResult</span><span class="token punctuation">(</span>finish<span class="token punctuation">,</span>result<span class="token punctuation">:</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 处理PINRemoteImage下载完成的结果哦 - parameter finish: 处理完成化后的回调 - parameter result: Result to PINRemoteImageManagerResult */</span>fileprivate <span class="token keyword">func</span> <span class="token function">HandlePinDownLoadResult</span><span class="token punctuation">(</span><span class="token number">_</span> finish<span class="token punctuation">:</span>@<span class="token function">escaping</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">,</span>result<span class="token punctuation">:</span><span class="token builtin">PINRemoteImageManagerResult</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 含有静态图片</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> img <span class="token operator">=</span> result<span class="token punctuation">.</span>image <span class="token punctuation">,</span><span class="token keyword">let</span> base64 <span class="token operator">=</span> <span class="token function">UIImageJPEGRepresentation</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">base64EncodedString</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> <span class="token builtin">NSData</span><span class="token punctuation">.</span><span class="token builtin">Base64EncodingOptions</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span>qos<span class="token punctuation">:</span> <span class="token punctuation">.</span>background<span class="token punctuation">)</span><span class="token punctuation">.</span>async <span class="token punctuation">{</span>            <span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">"data:image/jpeg;base64,<span class="token interpolation"><span class="token delimiter variable">\(</span>base64<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">.</span><span class="token function">replaceRegex</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceRegex</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>execute<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">finish</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>                <span class="token builtin">PINCache</span><span class="token punctuation">.</span><span class="token function">shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>string <span class="token keyword">as</span> <span class="token builtin">NSCoding</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string">"hanle<span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token keyword">self</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/// 缓存</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 含有动态图片</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> img <span class="token operator">=</span> result<span class="token punctuation">.</span>animatedImage <span class="token punctuation">{</span>        <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span>qos<span class="token punctuation">:</span> <span class="token builtin">DispatchQoS</span><span class="token punctuation">.</span><span class="token builtin">QoSClass</span><span class="token punctuation">.</span>background<span class="token punctuation">)</span><span class="token punctuation">.</span>async <span class="token punctuation">{</span>            <span class="token keyword">let</span> base64 <span class="token operator">=</span> img<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">base64EncodedString</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> <span class="token builtin">NSData</span><span class="token punctuation">.</span><span class="token builtin">Base64EncodingOptions</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">"data:image/gif;base64,<span class="token interpolation"><span class="token delimiter variable">\(</span>base64<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">.</span><span class="token function">replaceRegex</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceRegex</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>execute<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">finish</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>                <span class="token builtin">PINCache</span><span class="token punctuation">.</span><span class="token function">shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>string <span class="token keyword">as</span> <span class="token builtin">NSCoding</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string">"hanle<span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token keyword">self</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/// 缓存</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片加载进度条"><a href="#图片加载进度条" class="headerlink" title="图片加载进度条"></a>图片加载进度条</h3><p>这个需要html配合，首先咱们每个图片也就是<code>&lt;img&gt;</code>标签上都生成一个进度条。无论什么样子的都行。反正你得保证我把进度传递回去了，你找的到你的空间，那么唯一标识是。index还是其他的随你了。</p><pre class="line-numbers language-swift"><code class="language-swift">fileprivate <span class="token keyword">func</span> <span class="token function">DownloadImageByUrl</span><span class="token punctuation">(</span><span class="token number">_</span> progress<span class="token punctuation">:</span>@<span class="token function">escaping</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">,</span>finish<span class="token punctuation">:</span>@<span class="token function">escaping</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token builtin">PINCache</span><span class="token punctuation">.</span><span class="token function">shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token string">"hanle<span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token keyword">self</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">finish</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>    <span class="token builtin">PINRemoteImageManager</span><span class="token punctuation">.</span><span class="token function">shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">downloadImage</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> url<span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token function">PINRemoteImageManagerDownloadOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> progressDownload<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">)</span> <span class="token keyword">in</span>        <span class="token keyword">if</span> url<span class="token punctuation">.</span>absoluteString<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string">".gif"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> process <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token function">CGFloat</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">CGFloat</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>            <span class="token function">progress</span><span class="token punctuation">(</span><span class="token punctuation">(</span>process<span class="token operator">-</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> process<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token keyword">in</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">HandlePinDownLoadResult</span><span class="token punctuation">(</span>finish<span class="token punctuation">,</span>result<span class="token punctuation">:</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样咱们就获取到了进度了。</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">/**    根据提供的 URL 和 需要加载完成的 Index    - parameter url:   图片URL    - parameter index: 图片所在的Index    */</span>   fileprivate <span class="token keyword">func</span> <span class="token function">HandleUrlAndIndex</span><span class="token punctuation">(</span><span class="token number">_</span> url<span class="token punctuation">:</span><span class="token builtin">String</span><span class="token punctuation">,</span>index<span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       url<span class="token punctuation">.</span><span class="token function">DownloadImageByUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">(</span>pro<span class="token punctuation">)</span> <span class="token keyword">in</span>           <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>execute<span class="token punctuation">:</span> <span class="token punctuation">{</span>               <span class="token keyword">let</span> jsStr <span class="token operator">=</span> <span class="token string">"$(\"div .customProgressBar\").eq(<span class="token interpolation"><span class="token delimiter variable">\(</span>index<span class="token delimiter variable">)</span></span>).css(\"width\",\"<span class="token interpolation"><span class="token delimiter variable">\(</span>pro<span class="token delimiter variable">)</span></span>%\")"</span>               <span class="token keyword">self</span><span class="token punctuation">.</span>webView<span class="token punctuation">.</span><span class="token function">evaluateJavaScript</span><span class="token punctuation">(</span>jsStr<span class="token punctuation">,</span> completionHandler<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span> finish<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>base64<span class="token punctuation">)</span> <span class="token keyword">in</span>               <span class="token keyword">let</span> jsStr <span class="token operator">=</span> <span class="token string">"$(\"img\").eq(<span class="token interpolation"><span class="token delimiter variable">\(</span>index<span class="token delimiter variable">)</span></span>).attr(\"src\",\"<span class="token interpolation"><span class="token delimiter variable">\(</span>base64<span class="token delimiter variable">)</span></span>\")"</span>               <span class="token keyword">self</span><span class="token punctuation">.</span>webView<span class="token punctuation">.</span><span class="token function">evaluateJavaScript</span><span class="token punctuation">(</span>jsStr<span class="token punctuation">,</span> completionHandler<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>               <span class="token keyword">if</span> url<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string">".gif"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">let</span> display <span class="token operator">=</span> <span class="token string">"$(\"div .progress\").eq(<span class="token interpolation"><span class="token delimiter variable">\(</span>index<span class="token delimiter variable">)</span></span>).css(\"visibility\",\"hidden\")"</span>                   <span class="token keyword">self</span><span class="token punctuation">.</span>webView<span class="token punctuation">.</span><span class="token function">evaluateJavaScript</span><span class="token punctuation">(</span>display<span class="token punctuation">,</span> completionHandler<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>               <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的进度条class都叫做customProgressBar，之后我根据 index 进行的唯一性标识。<br>之后传入过去进度条。进行进度条的显示。</p><p>对了提醒一句 进度条特别占内存。咱们还是只给 gif 做做就算了，其他的没必要啊…………</p><p>谢谢</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h2&gt;&lt;p&gt;好久好久没有更新过博客了，今天去面试了一家公司。被询问到关于资讯类App的详情页问题，想到了很多之前做详情页时候遇见的问题和解决的问题，所以心血来潮的想记录下来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-184033745.jpg&quot; alt=&quot;&quot; title=&quot;只有一种英雄主义，就是在认清这个世界之后依然热爱他。 ——罗曼罗兰。&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="swift" scheme="http://www.msiter.com/tags/swift/"/>
    
      <category term="WKWebView" scheme="http://www.msiter.com/tags/WKWebView/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift 学习 未完待续</title>
    <link href="http://www.msiter.com/2016/07/06/RxSwift%20%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.msiter.com/2016/07/06/RxSwift 学习/</id>
    <published>2016-07-06T21:16:43.000Z</published>
    <updated>2017-11-28T11:07:04.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="为什么使用-RxSwift"><a href="#为什么使用-RxSwift" class="headerlink" title="为什么使用 RxSwift"></a>为什么使用 RxSwift</h3><p>其实这个问题就是在问，RxSwift它可以做什么呢？在他们编写程序的时候，总是会牵涉到需要检测某些值的变化。比如。textFiled Text变化？数据请求完成失败的变化？键盘弹起隐藏的变化，而我们需要做很多不一样的操作，去检测这些东西的变化情况，可能会是delegate，Notifinotion，KVO等等。</p><p>于是乎就有人想到了，为什么不设计一种处理机制来统一处理这些东西呢？所以 <code>reactivex</code> 这种机制出现了，而这里的 <code>RxSwift</code> 就是这么一个机制下的一个扩展。<br>所以RxSwift 为什么用它？你可以理解了吗？</p><p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-184019953.jpg" alt="" title="学校里还是相对单纯的地方，找不到女朋友，基本还是因为你丑。"></p><a id="more"></a><h3 id="RxSwift-概念"><a href="#RxSwift-概念" class="headerlink" title="RxSwift 概念"></a>RxSwift 概念</h3><p>每一个<code>Observable</code> 的实例相当于一个Swift中的Sequence。</p><p>但是区别在于，Swift中的SequenceType是同步的循环，而 <code>Observable</code> 是异步的。</p><ul><li>一个 <code>Observable (ObservableType)</code>  相当于一个序列<code>Sequence(SequenceType)</code> .</li><li><code>ObservableType.subscribe(_:)</code> 方法其实就相当于  <code>SequenceType.generate()</code></li><li><code>Observable</code> 对象会在有任何 <code>Event</code> 时候，将把 observer (ObserverType) 作为一个参数通过 <code>ObservableType.subscribe(_:)</code> 自动发出。并不需要 observer (ObserverType) 调用 <code>Next()</code>方法</li></ul><p>如果一个  <code>Observable</code> 发送了一个 <code>(Event.Next(Element))</code> 下一步指令的时候，它将会继续发送后续更多的 <code>Event</code> ，然而如果它发出的是一个  <code>(Event.Error(ErrorType))</code> 错误动作，或者是一个 <code>(Event.Completed)</code> 正常结束完成动作的话。它将通知不在发出任何动作。</p><p>序列的语法可以很明显的表达这一点:</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token builtin">Next</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">Error</span> <span class="token operator">|</span> <span class="token builtin">Completed</span><span class="token punctuation">)</span><span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图表可以直观的解释这一切</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">--</span><span class="token number">1</span><span class="token operator">--</span><span class="token number">2</span><span class="token operator">--</span><span class="token number">3</span><span class="token operator">--</span><span class="token number">4</span><span class="token operator">--</span><span class="token number">5</span><span class="token operator">--</span><span class="token number">6</span><span class="token operator">--</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// "|" = 正常终止</span><span class="token operator">--</span>a<span class="token operator">--</span>b<span class="token operator">--</span>c<span class="token operator">--</span>d<span class="token operator">--</span>e<span class="token operator">--</span>f<span class="token operator">--</span>X<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// "X" = 错误终止</span><span class="token operator">--</span>tap<span class="token operator">--</span>tap<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>tap<span class="token operator">--</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// "|" = 继续进行, 如同一个按钮点击事件的一个序列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这些图表被称为marble diagrams。你可以学习更多关于他们在 <a href="http://rxmarbles.com/" target="_blank" rel="noopener">rxmarbles.com</a>。</p></blockquote><h3 id="Observables-和-observers-又名-subscribers"><a href="#Observables-和-observers-又名-subscribers" class="headerlink" title="Observables 和 observers (又名 subscribers)"></a>Observables 和 observers (又名 subscribers)</h3><p><code>Observables</code> 观测数据将不会执行除非有用户用户订阅了它。在下面的示例中，观察到的关闭将永远不会被执行，因为没有订阅<code>observers</code>：</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"Observable with no subscribers"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token number">_</span> <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span><span class="token punctuation">.</span>create <span class="token punctuation">{</span> observerOfString <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Disposable</span> <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"This will never be printed"</span><span class="token punctuation">)</span>        observerOfString<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token string">"😬"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        observerOfString<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token builtin">Completed</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">NopDisposable</span><span class="token punctuation">.</span>instance    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在下面的示例中, 在结束之前会调用 <code>subscribe(_:)</code>:</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"Observable with subscriber"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token number">_</span> <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span><span class="token punctuation">.</span>create <span class="token punctuation">{</span> observerOfString <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Observable created"</span><span class="token punctuation">)</span>            observerOfString<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token string">"😉"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            observerOfString<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token builtin">Completed</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token builtin">NopDisposable</span><span class="token punctuation">.</span>instance        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> event <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不用担心这些创建 Observable 的细节，马上就要学习了</p><p>在以上的栗子中，我们返回的都是一个 NopDisposable.instance ，而在实际的情况中是需要 返回一个 DisposeBag 的实例的，来妥善的处理这些代码。 至于为什么？嗯。 ……   practice makes permanent 🙂 熟能生巧？ 你可以查看更多介绍 <a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md#disposing" target="_blank" rel="noopener">Disposing</a> ， <a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md" target="_blank" rel="noopener">Getting Started guide</a>.</p></blockquote><h3 id="创建和订阅一个-Observables"><a href="#创建和订阅一个-Observables" class="headerlink" title="创建和订阅一个 Observables"></a>创建和订阅一个 Observables</h3><p>有以下这几种方法来创建和订阅一个 <code>Observables</code></p><h4 id="never"><a href="#never" class="headerlink" title="never"></a>never</h4><p>创建一个 <code>Observables</code> ，不发出任何项目，不终止 就是任性！！！！</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-32bc4bdfb7ba6a73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="never"></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"never"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> neverSequence <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> neverSequenceSubscription <span class="token operator">=</span> neverSequence        <span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> <span class="token number">_</span> <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"This will never be printed"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    neverSequenceSubscription<span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h4><p>创建一个只发送完成动作的 <code>Observables</code> 对象。 老子不问过程，只看结果！！！</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-42da08b0fd5b9cea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="empty"></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"empty"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> event <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个实例还介绍了创建和订阅一个 Observables 对象，其实就是执行了 subscribe 这个方法。</p></blockquote><h4 id="just"><a href="#just" class="headerlink" title="just"></a>just</h4><p>创建一个发送制定动作的的 <code>Observables</code> 对象。</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-dc8ba7d0f279a460.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="just"></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"just"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"🔴"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> event <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个实例还介绍了创建和订阅一个 Observables 对象，其实就是执行了 <code>subscribe</code> 这个方法。</p></blockquote><h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4><p>创建一个具有固定数量的 <code>Observables</code> 对象</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-dc8ba7d0f279a460.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="just"></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"of"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"🐶"</span><span class="token punctuation">,</span> <span class="token string">"🐱"</span><span class="token punctuation">,</span> <span class="token string">"🐭"</span><span class="token punctuation">,</span> <span class="token string">"🐹"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>subscribeNext <span class="token punctuation">{</span> element <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个例子还介绍了 subscribeNext(<em>:) 这种简单的方法<br>不像 subscribe(</em>:),它是定语了所有的动作 包括 （Next, Error, and Completed）<br>subscribeNext 将会忽略所有的 (Error and Completed )动作，只会生产出一个 Next 动作、<br>我们这里同样也有 完成 和 失败 对应的简单方法。 subscribeError(<em>:) and subscribeCompleted(</em>:)，当你只想检测是对应的动作的时候<br>如果你想订阅所有的动作的你可以使用   subscribe(onNext:onError:onCompleted:onDisposed:)` 就像下面的例子 👇<br>看了以下自己写的。不知道怎么说！  草  ！subscribe 就是拦截所有的操作！  比如 next error 和 complted。<br>而这些检测都有单独的简便方法 subscribeNext  subscribeError subscribeCompleted</p><p>Example</p><pre><code>someObservable.subscribe(    onNext: { print(&quot;Element:&quot;, $0) },    onError: { print(&quot;Error:&quot;, $0) },    onCompleted: { print(&quot;Completed&quot;) },    onDisposed: { print(&quot;Disposed&quot;) })</code></pre></blockquote><h4 id="toObservable"><a href="#toObservable" class="headerlink" title="toObservable"></a>toObservable</h4><p>将一个 sequence(SequenceType),转换成为一个 <code>Observable</code> ,可以是任何实现了(SequenceType)协议的对象，比如Array, Dictionary, or Set</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"toObservable"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token string">"🐶"</span><span class="token punctuation">,</span> <span class="token string">"🐱"</span><span class="token punctuation">,</span> <span class="token string">"🐭"</span><span class="token punctuation">,</span> <span class="token string">"🐹"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>subscribeNext <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>该例子使用了 $0 这一种参数，而不是显式命名的参数</p></blockquote><h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><p>创建一个 <code>Observable</code> 序列<br><img src="http://upload-images.jianshu.io/upload_images/755009-62884a006c12cc68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="create"></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> myJust <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>element<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span> <span class="token keyword">in</span>        <span class="token keyword">return</span> <span class="token builtin">Observable</span><span class="token punctuation">.</span>create <span class="token punctuation">{</span> observer <span class="token keyword">in</span>            observer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span>            observer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token builtin">Completed</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token builtin">NopDisposable</span><span class="token punctuation">.</span>instance        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">myJust</span><span class="token punctuation">(</span><span class="token string">"🔴"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>创建一个 可以发射一系列的连续整数，然后终止 的 <code>Observable</code>对象</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-5fa8215035a92cb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="range"></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"range"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">count</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="repeatElement"><a href="#repeatElement" class="headerlink" title="repeatElement"></a>repeatElement</h4><p>创建一个无限地发射给定的元素 <code>Observable</code>。  豌豆君？？</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-00b2005946443344.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="repeatElement"></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"repeatElement"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">repeatElement</span><span class="token punctuation">(</span><span class="token string">"🔴"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>subscribeNext <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>该栗子中使用 take 方法来限制发射给定元素的次数</p></blockquote><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><p>创建一个只有当提供的所有的判断条件都为 true 的时候，才会给出动作的  <code>Observable</code> !  老子 刚正不阿</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>            initialState<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            condition<span class="token punctuation">:</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            iterate<span class="token punctuation">:</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span>subscribeNext <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="deferred"><a href="#deferred" class="headerlink" title="deferred"></a>deferred</h4><p>创建一个全新的  <code>Observable</code> ，你TM才是搬运工，老子是大自然的创造者！</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-e83303a845a37808.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"deferred"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> <span class="token builtin">count</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">let</span> deferredSequence <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span><span class="token punctuation">.</span>deferred <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Creating <span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token builtin">count</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>        <span class="token builtin">count</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token builtin">Observable</span><span class="token punctuation">.</span>create <span class="token punctuation">{</span> observer <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Emitting..."</span><span class="token punctuation">)</span>            observer<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🐶"</span><span class="token punctuation">)</span>            observer<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🐱"</span><span class="token punctuation">)</span>            observer<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🐵"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token builtin">NopDisposable</span><span class="token punctuation">.</span>instance        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    deferredSequence        <span class="token punctuation">.</span>subscribeNext <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span>    deferredSequence        <span class="token punctuation">.</span>subscribeNext <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><p>创建一个不做任何操作，直接丢一个错误给你的 <code>Observable</code>. 对方不想和你 BB，并丢给你一个错误 😐</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token builtin">Error</span><span class="token punctuation">.</span><span class="token builtin">Test</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="doOn"><a href="#doOn" class="headerlink" title="doOn"></a>doOn</h4><p>为每一个发出的事件和返回的执行制定操作。 收费站？</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-61b525586595f814.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">"doOn"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"🍎"</span><span class="token punctuation">,</span> <span class="token string">"🍐"</span><span class="token punctuation">,</span> <span class="token string">"🍊"</span><span class="token punctuation">,</span> <span class="token string">"🍋"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>doOn <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Intercepted:"</span><span class="token punctuation">,</span> $<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span>subscribeNext <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里也有。 doOnNext(<em>:), doOnError(</em>:), and doOnCompleted(<em>:) 简便方法。 也有 doOn(onNext(</em>:)onError(<em>:)onCompleted(</em>:)) 这样的方法</p></blockquote><h2 id="Working-with-Subjects"><a href="#Working-with-Subjects" class="headerlink" title="Working with Subjects"></a>Working with Subjects</h2><p>使用 Subjects 进行工作，一个 Subject 可以理解为一个中间人，他既可以观察者观察，向观察者提供动作。也可以当作观察者去观察，来接受对象。 大概的意思。可攻可受？？？</p><h3 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h3><p>向所有订阅者发布动作。在他们订阅之后。这个时间是有关系的哦。从下图也可以看到，第二个订阅的用户，已经错过了接受红绿的时间。所以他只接受到了，蓝色和错误动作</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-52e8b61b5b1553ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PublishSubject"></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> subject <span class="token operator">=</span> <span class="token builtin">PublishSubject</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span>subscribe<span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第一次订阅"</span><span class="token punctuation">,</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🐶"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🐱"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span>subscribe<span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第二次订阅"</span><span class="token punctuation">,</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🅰️"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🅱️"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这份代码中第一个订阅可以展示4个？而第二次，就只能接收到 小猫和小狗。</p><blockquote><p>在这份例子中，使用的是  onNext(<em>:) 简便的方法，当然也有 错误 和 完成的简便方法 onError(</em>:) , onCompleted() . 你也可以直接食用 on(.Error(<em>:)) on(.Completed(</em>:)) on(.Next(<em>:))  这和之前的如出一辙 (</em>:)</p></blockquote><h3 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h3><p>咱们之前创建的 PublishSubject ，如果在订阅之前的时间是不会接收到的，而这个呢 可以指定，缓存的个数，比如 2 ，那么咱们就可以接受订阅时间之前两次的 动作事件。</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-e5b881a5fd17a49d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ReplaySubject"></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> subject <span class="token operator">=</span> <span class="token builtin">ReplaySubject</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>bufferSize<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span>subscribe<span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第一次订阅"</span><span class="token punctuation">,</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🐶"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🐱"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span>subscribe<span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第二次订阅"</span><span class="token punctuation">,</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🅰️"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🅱️"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这份代码中，第二次的额订阅的时候 就会 是 小猫 A 和 B了～</p><h3 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h3><p>向所有的订阅者广播新的事件，并且传递 当前 的最新值，初始值。</p><p><img src="http://upload-images.jianshu.io/upload_images/755009-ee65a318eaf1ab57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BehaviorSubject"></p><p>怎么感觉就是  ReplaySubject 之后 buffSize 是 1 的变形呢。。。。除了多了一个初始值。。。</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">let</span> disposeBag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> subject <span class="token operator">=</span>  <span class="token function">BehaviorSubject</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token string">"🔴"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span>subscribe<span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第一次订阅"</span><span class="token punctuation">,</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🐶"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🐱"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span>subscribe<span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第二次订阅"</span><span class="token punctuation">,</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🅰️"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"🅱️"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第二次订阅出现的时候会多出现一次。最新值。而第一次订阅则会出现一个 初始值。</p><blockquote><p>看了这三个例子有没有好像遗漏了什么 ，一个 Completed 事件。 PublishSubject, ReplaySubject, 和 BehaviorSubject 不会在自动发出 完成事件的。</p></blockquote><h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><p>BehaviorSubject 变种。。。  就是说呢，BehaviorSubject 不是不会自动发送 Completed 事件吗？  Variable 会。没了。</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">let</span> variable <span class="token operator">=</span> <span class="token function">Variable</span><span class="token punctuation">(</span><span class="token string">"🔴"</span><span class="token punctuation">)</span>subject<span class="token punctuation">.</span>subscribe<span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第一次订阅"</span><span class="token punctuation">,</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span>variable<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"🐶"</span>variable<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"🐱"</span>subject<span class="token punctuation">.</span>subscribe<span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第一次订阅"</span><span class="token punctuation">,</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">addDisposableTo</span><span class="token punctuation">(</span>disposeBag<span class="token punctuation">)</span>variable<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"🅰️"</span>variable<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"🅱️"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Variable 对象 调用  asObservable() 方法可以获取他变种前的  BehaviorSubject 对象。 Variable 对象 不能实现 onNext 方法，但是你可以调用他的 value 参数，来 get 和set 它的值。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;为什么使用-RxSwift&quot;&gt;&lt;a href=&quot;#为什么使用-RxSwift&quot; class=&quot;headerlink&quot; title=&quot;为什么使用 RxSwift&quot;&gt;&lt;/a&gt;为什么使用 RxSwift&lt;/h3&gt;&lt;p&gt;其实这个问题就是在问，RxSwift它可以做什么呢？在他们编写程序的时候，总是会牵涉到需要检测某些值的变化。比如。textFiled Text变化？数据请求完成失败的变化？键盘弹起隐藏的变化，而我们需要做很多不一样的操作，去检测这些东西的变化情况，可能会是delegate，Notifinotion，KVO等等。&lt;/p&gt;
&lt;p&gt;于是乎就有人想到了，为什么不设计一种处理机制来统一处理这些东西呢？所以 &lt;code&gt;reactivex&lt;/code&gt; 这种机制出现了，而这里的 &lt;code&gt;RxSwift&lt;/code&gt; 就是这么一个机制下的一个扩展。&lt;br&gt;所以RxSwift 为什么用它？你可以理解了吗？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-184019953.jpg&quot; alt=&quot;&quot; title=&quot;学校里还是相对单纯的地方，找不到女朋友，基本还是因为你丑。&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.msiter.com/categories/IOS/"/>
    
    
      <category term="ios" scheme="http://www.msiter.com/tags/ios/"/>
    
      <category term="swift" scheme="http://www.msiter.com/tags/swift/"/>
    
      <category term="RX" scheme="http://www.msiter.com/tags/RX/"/>
    
  </entry>
  
  <entry>
    <title>reactivex 学习</title>
    <link href="http://www.msiter.com/2016/06/21/reactivex%20%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.msiter.com/2016/06/21/reactivex 学习/</id>
    <published>2016-06-21T23:22:00.000Z</published>
    <updated>2017-11-28T11:07:04.831Z</updated>
    
    <content type="html"><![CDATA[<p><img class = "g-pl-90"  src="http://image.msiter.com/stock-photo-179922657.jpg" alt="" title="庆幸你来自远方不清楚我的过往。"></p><h3 id="散记"><a href="#散记" class="headerlink" title="散记"></a>散记</h3><p>好久没有学习到新的东西了，之前一直想学习 <code>ReactiveCocoa</code>,但是看了一点之后，觉的很是繁琐，而且感觉很多api方法，再加上项目很紧迫没有时间去学习新的东西了。我就暂时搁置了，现在项目做的也差不多了，觉得这个学习进度是时候提上进程。</p><p>再开始学习的时候，发现了<code>RxSwift</code>.在之后发现了 <code>reactivex</code> 。进入了官网发现自己可能，找到了一个 类似于 <code>Realm</code>和<code>swagger</code> 的庞然大物， 绝对要好好学习，在加上自己学习的本身就是swift。自然选择了 RXswift。</p><p>好了，废话不多说了，开始学习吧，请耐心看下去。因为我也是翻译，所以如果有任何觉得不应该的地方，可以提醒我。</p><a id="more"></a><h3 id="ReactiveX"><a href="#ReactiveX" class="headerlink" title="ReactiveX"></a>ReactiveX</h3><p>在进入ReactiveX的官方网站后，就看到了它对自己的评价</p><blockquote><p>ReactiveX is a combination of the best ideas from<br>the Observer pattern, the Iterator pattern, and functional programming</p></blockquote><p>reactivex组合是观察者模式，迭代器模式和函数式编程最好的想法。</p><p>ok ~ 好吧，算你吊。什么意思！</p><h3 id="Observable-观察者模式"><a href="#Observable-观察者模式" class="headerlink" title="Observable 观察者模式"></a>Observable 观察者模式</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>在reactivex 观察者 订阅 可观察对象。然后，观察者 会对 可观察对象 以任意顺序发出的任何项目丢回作出反应。这种模式有利于并发操作，他不需要创建一个阻塞对象来等待 可观察者 发出任何指令,而是创建一个哨兵的形式的观察员，随时准备作出适当的反应针对于 可观察对象 发出的项目。</p><p><img src="http://reactivex.io/assets/operators/legend.png" alt=""></p><p>See Also</p><ul><li><a href="http://reactivex.io/documentation/single.html" target="_blank" rel="noopener">Single</a> — 一个针对于可观察对象只发出一次项目的专门版本</li><li><a href="http://channel9.msdn.com/Series/Rx-Workshop/Rx-Workshop-Introduction" target="_blank" rel="noopener">Rx Workshop: Introduction</a></li><li><a href="http://www.introtorx.com/Content/v1.0.10621.0/02_KeyTypes.html#IObservable" target="_blank" rel="noopener">Introduction to Rx: IObservable</a></li><li><a href="http://docs.couchbase.com/developer/java-2.0/observables.html" target="_blank" rel="noopener">Mastering observables</a> (来自 Couchbase 服务器的文档)</li><li><a href="https://medium.com/@andrestaltz/2-minute-introduction-to-rx-24c8ca793877" target="_blank" rel="noopener">2 minute introduction to Rx</a>  作者: Andre Staltz(“Think of an Observable as an asynchronous immutable array.”) (把一个可观察对象认作为一个异步不可改变的数组)</li><li><a href="https://egghead.io/lessons/javascript-introducing-the-observable" target="_blank" rel="noopener">Introducing the Observable</a> by Jafar Husain (JavaScript Video Tutorial)</li><li><a href="https://egghead.io/lessons/javascript-introducing-the-observable" target="_blank" rel="noopener">Observable object</a> (RxJS) by Dennis Stoyanov</li><li><a href="https://afterecho.uk/blog/turning-a-callback-into-an-rx-observable.html" target="_blank" rel="noopener">Turning a callback into an Rx Observable</a> by @afterecho</li></ul><h4 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h4><p>在许多编程项目中，人们往往更倾向于在一个时间执行一个指令执行或者完成一个增量操作。但是在reactivex中，许多指令可以并行执行。其结果会在后来以任意顺序被观察者抓获。而不是定义一个方法完成数据的转换等操作方法，然后以一个 被观察者的身份去订阅了一个观察者。</p><p>这种方法的一个优点是，当你有一堆不依赖于彼此的任务时，你可以同时启动它们，而不是等待每一个完成之前开始下一个-这样，你的总执行时间就是你一堆任务执行时间最长的那一个，就像是木板组成水桶，装的水多少在于最短的那块木板一样的道里。</p><p>有许多术语用来描述这种异步编程和设计模型。本文档将使用以下术语：一个观察者订阅观察。一个可观察的发射项目或通过调用观察员的方法发送通知给它的观察员。</p><p>在其他情况下，有时也称观察员为“用户”“观看的人”或“堆”。这种模式一般是通常被称为“反应模式”</p><h4 id="建立观察员"><a href="#建立观察员" class="headerlink" title="建立观察员"></a>建立观察员</h4><p>在一个普通的方法调用是异步的，没有排序，并行调用典型的reactivex -流程是这样的：</p><ol><li>调用方法。</li><li>将该方法的返回值存储在一个变量中</li><li>使用这个变量和它的新值来做一些有用的事情。</li></ol><p>或者，像这样的：</p><pre><code>// 打电话，把它的返回值 赋值给` returnval `returnval =方法（参数）；// returnval 去做点有用的事儿</code></pre><p>在异步模型中，流程会像这样：</p><ol><li>定义一个方法，做一些有用的从异步调用返回值；该方法是观察者的一部分。也就是 A 调用方法做出一些调整后 反悔 A</li><li>定义异步调用方法本身作为一个可观察的对象</li><li>附加的观测器，通过订阅它观察（这也导致可观察到的开始行动）</li><li>继续你的业务；每当调用返回时，观察者的方法将开始操作它的返回值或值-所观察到的项目。</li></ol><p>看起来像这样：</p><pre><code>// 定义，但不调用，用户 onNext  处理// 在这个例子中，观察者是非常简单的，只有一个`onNext`处理def myOnNext = { it -&gt; do something useful with it };// 定义，但不调用，可观察到的def myObservable = someObservable(itsParameters);// 订阅用户可见，并调用观察myObservable.subscribe(myOnNext);// 继续我的业务</code></pre><h5 id="onNext-onCompleted-and-onError"><a href="#onNext-onCompleted-and-onError" class="headerlink" title="onNext, onCompleted, and onError"></a>onNext, onCompleted, and onError</h5><p>您的观察者实现以下方法的一些订阅方法子集可以将一个观察者连接到一个可观察到的：</p><h6 id="onNext"><a href="#onNext" class="headerlink" title="onNext"></a>onNext</h6><p>无论任何时候，一个可观察对象调用这个方法发出一个项目，这个方法会把 被观察者发出的这个项目作为一个参数继续传递下去</p><h6 id="onError"><a href="#onError" class="headerlink" title="onError"></a>onError</h6><p>一个被观察者遇到非预期的数据和一些错误，就会调用这个方法，接下来它不会调用 <code>onCompleted</code> 或者 <code>onNext</code> 方法，这个方法将错误的指示作为参数</p><h6 id="onCompleted"><a href="#onCompleted" class="headerlink" title="onCompleted"></a>onCompleted</h6><p>没有发生错误的情况下，完成操作后，调用的方法。</p><p>通过对观察到的条款，它可以调用<code>OnNext</code>零次或更多次，然后可以根据调用结果调用 最后一次 onCompleted或OnError。按照惯例，在这个文件中，调用<code>OnNext</code>通常被称为“排放”的项目，而叫<code>onCompleted</code>或<code>onError</code>被称为“通知”。</p><p>参见：</p><ul><li><a href="http://www.introtorx.com/Content/v1.0.10621.0/02_KeyTypes.html#IObserver" target="_blank" rel="noopener">Introduction to Rx: IObserver</a></li></ul><h5 id="注销-Unsubscribing"><a href="#注销-Unsubscribing" class="headerlink" title="注销 Unsubscribing"></a>注销 Unsubscribing</h5><p>在一些reactivex实现，有一个专门的观察者接口，签约者，实现一个<code>Unsubscribing</code>的方法。你可以调用这个方法来表明，用户不再对目前任何订阅感兴趣。这些观测可以（如果他们没有其他感兴趣的观察员）选择停止产生新的物品发出。</p><p>这一结果将级联退订通过运营商，适用于观察，观察者订阅的链，这将导致在产业链的各个环节停止发射项目。这不保证立即发生，但是，它是可能的一个观察到的产生和尝试发射一段时间，即使没有观察者仍然观察这些排放量。</p><h5 id="关于命名约定的一些注释"><a href="#关于命名约定的一些注释" class="headerlink" title="关于命名约定的一些注释"></a>关于命名约定的一些注释</h5><p>reactivex每个语言的具体实现有自己的命名习惯。有没有规范的命名标准，虽然有许多共性之间的实现</p><p>此外，这些名称中的一些在其他上下文中有不同的含义，或在一个特定的实现语言的成语中显得有些尴尬。</p><p>例如有事件的命名模式（例如OnNext，OnCompleted，OnError）。在某些情况下，这样的名称将表示方法，通过该事件处理程序的注册。然而，他们的名字reactivex，事件处理器。</p><h4 id="“热”和“冷”的-被观测者"><a href="#“热”和“冷”的-被观测者" class="headerlink" title="“热”和“冷”的 被观测者"></a>“热”和“冷”的 被观测者</h4><p>什么时候被观察者会发出信息？这取决于被观察者。“热”的观察可能当他刚被创建没多久就发出信息，所以后来订阅的观察者观察到的信息就是中间的某些地方。“冷”的观察，直到一个订阅者观察他的变化，他才开始发生信息。所以观察者就看到他的整个信息过程</p><p>在reactivex一些实施方案中，也有一些称为“连接”的观察。除非一个观察者订阅了这个连接对象并且调用它的 <code>Connect</code> 方法，否则被观察者不会发出信息</p><h4 id="通过可观察算子的合成"><a href="#通过可观察算子的合成" class="headerlink" title="通过可观察算子的合成"></a>通过可观察算子的合成</h4><p>观察者和被观察者仅仅只是 <code>ReactiveX</code>的开始。由他们自己，他们只不过是一个轻微的扩展的标准观察者模式，更适合处理一系列的事件，而不是一个单一的回调。</p><p>真正的力量来自于<code>reactive extensions</code>（即<code>reactivex</code>）-运营商可以变换，结合，操纵，并与发射的观测值序列的工作项目。</p><p>这些接收运营商允许你一起构成异步序列在声明的方式与所有的回调函数的效率效益但没有嵌套的回调处理程序通常与异步系统相关的问题。</p><p>This documentation groups information about the various operators and examples of their usage into the following pages:</p><p><a href="http://reactivex.io/documentation/operators.html#creating" target="_blank" rel="noopener">Creating Observables</a><br><code>Create</code>, <code>Defer</code>, <code>Empty/Never/Throw</code>, <code>From</code>, <code>Interval</code>, <code>Just</code>, <code>Range</code>, <code>Repeat</code>, <code>Start</code>, and <code>Timer</code><br><a href="http://reactivex.io/documentation/operators.html#transforming" target="_blank" rel="noopener">Transforming Observable Items</a><br><code>Buffer</code>, <code>FlatMap</code>, <code>GroupBy</code>, <code>Map</code>, <code>Scan</code>, and <code>Window</code><br><a href="http://reactivex.io/documentation/operators.html#filtering" target="_blank" rel="noopener">Filtering Observables</a><br><code>Debounce</code>, <code>Distinct</code>, <code>ElementAt</code>, <code>Filter</code>, <code>First</code>, <code>IgnoreElements</code>, <code>Last</code>, <code>Sample</code>, <code>Skip</code>, <code>SkipLast</code>, <code>Take</code>, and <code>TakeLast</code><br><a href="http://reactivex.io/documentation/operators.html#combining" target="_blank" rel="noopener">Combining Observables</a><br><code>And/Then/When</code>, <code>CombineLatest</code>, <code>Join</code>, <code>Merge</code>, <code>StartWith</code>, <code>Switch</code>, and <code>Zip</code><br><a href="http://reactivex.io/documentation/operators.html#error" target="_blank" rel="noopener">Error Handling Operators</a><br><code>Catch</code> and <code>Retry</code><br><a href="http://reactivex.io/documentation/operators.html#utility" target="_blank" rel="noopener">Utility Operators</a><br><code>Delay</code>, <code>Do</code>, <code>Materialize/Dematerialize</code>, <code>ObserveOn</code>, <code>Serialize</code>, <code>Subscribe</code>, <code>SubscribeOn</code>, <code>TimeInterval</code>, <code>Timeout</code>, <code>Timestamp</code>, and <code>Using</code><br><a href="http://reactivex.io/documentation/operators.html#conditional" target="_blank" rel="noopener">Conditional and Boolean Operators</a><br><code>All</code>, <code>Amb</code>, <code>Contains</code>, <code>DefaultIfEmpty</code>, <code>SequenceEqual</code>, <code>SkipUntil</code>, <code>SkipWhile</code>, <code>TakeUntil</code>, and <code>TakeWhile</code><br><a href="http://reactivex.io/documentation/operators.html#mathematical" target="_blank" rel="noopener">Mathematical and Aggregate Operators</a><br><code>Average</code>, <code>Concat</code>, <code>Count</code>, <code>Max</code>, <code>Min</code>, <code>Reduce</code>, and <code>Sum</code><br><a href="http://reactivex.io/documentation/operators.html#conversion" target="_blank" rel="noopener">Converting Observables</a><br><code>To</code><br><a href="http://reactivex.io/documentation/operators.html#connectable" target="_blank" rel="noopener">Connectable Observable Operators</a><br><code>Connect</code>, <code>Publish</code>, <code>RefCount</code>, and <code>Replay</code><br><a href="http://reactivex.io/documentation/operators/backpressure.html" target="_blank" rel="noopener">Backpressure Operators</a><br>执行特定的流量控制策略的各种运营商</p><h5 id="连锁运营商"><a href="#连锁运营商" class="headerlink" title="连锁运营商"></a>连锁运营商</h5><p>大多数操作符在可观察到的和返回一个可观察到的。这允许你应用这些操作符一个接一个，在一个链中。链中的每个操作符都修改了可观察到的结果，从以前的操作的操作。<br>还有其他模式，如生成器模式，其中一个特定类的各种方法通过修改该对象的操作来修改该类的一个类上的一个项目。这些模式也允许你以类似的方式链的方法。但在生成器模式中，在链中出现的方法的顺序通常不重要，与可观察到的运营商的订单事宜。<br>观察到的操作符的链不独立于原始观察到的起源链，但他们反过来操作，每一个操作上的观察所产生的运营商立即在外链。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.msiter.com/stock-photo-179922657.jpg&quot; alt=&quot;&quot; title=&quot;庆幸你来自远方不清楚我的过往。&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;散记&quot;&gt;&lt;a href=&quot;#散记&quot; class=&quot;headerlink&quot; title=&quot;散记&quot;&gt;&lt;/a&gt;散记&lt;/h3&gt;&lt;p&gt;好久没有学习到新的东西了，之前一直想学习 &lt;code&gt;ReactiveCocoa&lt;/code&gt;,但是看了一点之后，觉的很是繁琐，而且感觉很多api方法，再加上项目很紧迫没有时间去学习新的东西了。我就暂时搁置了，现在项目做的也差不多了，觉得这个学习进度是时候提上进程。&lt;/p&gt;
&lt;p&gt;再开始学习的时候，发现了&lt;code&gt;RxSwift&lt;/code&gt;.在之后发现了 &lt;code&gt;reactivex&lt;/code&gt; 。进入了官网发现自己可能，找到了一个 类似于 &lt;code&gt;Realm&lt;/code&gt;和&lt;code&gt;swagger&lt;/code&gt; 的庞然大物， 绝对要好好学习，在加上自己学习的本身就是swift。自然选择了 RXswift。&lt;/p&gt;
&lt;p&gt;好了，废话不多说了，开始学习吧，请耐心看下去。因为我也是翻译，所以如果有任何觉得不应该的地方，可以提醒我。&lt;/p&gt;
    
    </summary>
    
      <category term="开发帮助" scheme="http://www.msiter.com/categories/%E5%BC%80%E5%8F%91%E5%B8%AE%E5%8A%A9/"/>
    
    
      <category term="reactiv" scheme="http://www.msiter.com/tags/reactiv/"/>
    
      <category term="rxswift" scheme="http://www.msiter.com/tags/rxswift/"/>
    
  </entry>
  
</feed>
